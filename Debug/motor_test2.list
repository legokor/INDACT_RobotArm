
motor_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800646c  0800646c  0001646c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064c0  080064c0  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080064c0  080064c0  000164c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064c8  080064c8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064c8  080064c8  000164c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064cc  080064cc  000164cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080064d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  20000018  080064e8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  080064e8  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d3d  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232c  00000000  00000000  00034d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  000370b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  000382f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028808  00000000  00000000  00039470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156d2  00000000  00000000  00061c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001065ef  00000000  00000000  0007734a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017d939  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f60  00000000  00000000  0017d98c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006454 	.word	0x08006454

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08006454 	.word	0x08006454

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <compare>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int compare(const void *a, const void *b) {
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
    uint32_t val1 = *(const uint32_t *)a;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	60fb      	str	r3, [r7, #12]
    uint32_t val2 = *(const uint32_t *)b;
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	60bb      	str	r3, [r7, #8]
    if (val1 < val2) return -1;
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d202      	bcs.n	80004f0 <compare+0x24>
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295
 80004ee:	e006      	b.n	80004fe <compare+0x32>
    if (val1 > val2) return 1;
 80004f0:	68fa      	ldr	r2, [r7, #12]
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d901      	bls.n	80004fc <compare+0x30>
 80004f8:	2301      	movs	r3, #1
 80004fa:	e000      	b.n	80004fe <compare+0x32>
    return 0;
 80004fc:	2300      	movs	r3, #0
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <rendezz>:

void rendezz(uint32_t** buffers, uint32_t* adc_norm_val)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
	  uint32_t median[3]={0u};
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]

	  for(int i=0; i<3; i++)
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	e03f      	b.n	80005a8 <rendezz+0x9c>
	  {
		  qsort(buffers[i], 50, sizeof(uint32_t), compare);
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	4413      	add	r3, r2
 8000530:	6818      	ldr	r0, [r3, #0]
 8000532:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <rendezz+0xac>)
 8000534:	2204      	movs	r2, #4
 8000536:	2132      	movs	r1, #50	; 0x32
 8000538:	f005 fe3c 	bl	80061b4 <qsort>
		  median[i]=buffers[i][24];
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	4413      	add	r3, r2
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	3318      	adds	r3, #24
 800054e:	443b      	add	r3, r7
 8000550:	f843 2c10 	str.w	r2, [r3, #-16]

		  if (i == 2)
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	2b02      	cmp	r3, #2
 8000558:	d112      	bne.n	8000580 <rendezz+0x74>
		  {
			  adc_norm_val[i] = 25u + (median[i] * 35)/4096;
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	3318      	adds	r3, #24
 8000560:	443b      	add	r3, r7
 8000562:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8000566:	4613      	mov	r3, r2
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	4413      	add	r3, r2
 800056c:	00da      	lsls	r2, r3, #3
 800056e:	1ad3      	subs	r3, r2, r3
 8000570:	0b1a      	lsrs	r2, r3, #12
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	6839      	ldr	r1, [r7, #0]
 8000578:	440b      	add	r3, r1
 800057a:	3219      	adds	r2, #25
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	e010      	b.n	80005a2 <rendezz+0x96>
		  }
		  else
		  {
			  adc_norm_val[i] = 65u + (median[i] * 60)/4096;
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	3318      	adds	r3, #24
 8000586:	443b      	add	r3, r7
 8000588:	f853 2c10 	ldr.w	r2, [r3, #-16]
 800058c:	4613      	mov	r3, r2
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	0b1a      	lsrs	r2, r3, #12
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	6839      	ldr	r1, [r7, #0]
 800059c:	440b      	add	r3, r1
 800059e:	3241      	adds	r2, #65	; 0x41
 80005a0:	601a      	str	r2, [r3, #0]
	  for(int i=0; i<3; i++)
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	ddbc      	ble.n	8000528 <rendezz+0x1c>
		  }
	  }
}
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	080004cd 	.word	0x080004cd

080005bc <merj>:


void merj(ADC_HandleTypeDef **hadc, uint32_t** buffers )
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	for(int j=0; j<50; j++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	e031      	b.n	8000630 <merj+0x74>
	{
		for(int i=0; i<3; i++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	e025      	b.n	800061e <merj+0x62>
		{
			HAL_ADC_Start(hadc[i]);
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 f985 	bl	80018ec <HAL_ADC_Start>
			HAL_ADC_PollForConversion(hadc[i], 20);
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2114      	movs	r1, #20
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fa36 	bl	8001a60 <HAL_ADC_PollForConversion>
			buffers[i][j] = HAL_ADC_GetValue(hadc[i]);
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	4413      	add	r3, r2
 80005fc:	6819      	ldr	r1, [r3, #0]
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	683a      	ldr	r2, [r7, #0]
 8000604:	4413      	add	r3, r2
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	18d4      	adds	r4, r2, r3
 800060e:	4608      	mov	r0, r1
 8000610:	f001 fafe 	bl	8001c10 <HAL_ADC_GetValue>
 8000614:	4603      	mov	r3, r0
 8000616:	6023      	str	r3, [r4, #0]
		for(int i=0; i<3; i++)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	3301      	adds	r3, #1
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	2b02      	cmp	r3, #2
 8000622:	ddd6      	ble.n	80005d2 <merj+0x16>
		}
		 HAL_Delay(10);
 8000624:	200a      	movs	r0, #10
 8000626:	f000 fdf1 	bl	800120c <HAL_Delay>
	for(int j=0; j<50; j++)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	3301      	adds	r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2b31      	cmp	r3, #49	; 0x31
 8000634:	ddca      	ble.n	80005cc <merj+0x10>
	}
}
 8000636:	bf00      	nop
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	bd90      	pop	{r4, r7, pc}

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fd65 	bl	8001114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f84f 	bl	80006ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800064e:	f000 f89e 	bl	800078e <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 faa7 	bl	8000ba4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000656:	f000 fa75 	bl	8000b44 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800065a:	f000 fa01 	bl	8000a60 <MX_TIM2_Init>
  MX_ADC1_Init();
 800065e:	f000 f8c1 	bl	80007e4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000662:	f000 f935 	bl	80008d0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000666:	f000 f997 	bl	8000998 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800066a:	2100      	movs	r1, #0
 800066c:	481c      	ldr	r0, [pc, #112]	; (80006e0 <main+0xa0>)
 800066e:	f004 f8df 	bl	8004830 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000672:	2104      	movs	r1, #4
 8000674:	481a      	ldr	r0, [pc, #104]	; (80006e0 <main+0xa0>)
 8000676:	f004 f8db 	bl	8004830 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800067a:	2108      	movs	r1, #8
 800067c:	4818      	ldr	r0, [pc, #96]	; (80006e0 <main+0xa0>)
 800067e:	f004 f8d7 	bl	8004830 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint32_t* buffers[3]={(uint32_t*)buffer1, (uint32_t*)buffer2, (uint32_t*)buffer3};
 8000682:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <main+0xa4>)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	ca07      	ldmia	r2, {r0, r1, r2}
 800068a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint32_t adc_norm_val[3] = {0u};
 800068e:	463b      	mov	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]

  while (1)
  {
	  merj(hadc, buffers);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4619      	mov	r1, r3
 800069e:	4812      	ldr	r0, [pc, #72]	; (80006e8 <main+0xa8>)
 80006a0:	f7ff ff8c 	bl	80005bc <merj>
	  rendezz(buffers, adc_norm_val);
 80006a4:	463a      	mov	r2, r7
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	4611      	mov	r1, r2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff2d 	bl	800050c <rendezz>

	  if (adc_norm_val[0])
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d003      	beq.n	80006c0 <main+0x80>
	  {
		  htim2.Instance->CCR1 = adc_norm_val[0];
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <main+0xa0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	683a      	ldr	r2, [r7, #0]
 80006be:	635a      	str	r2, [r3, #52]	; 0x34
	  }

	  if (adc_norm_val[1])
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d003      	beq.n	80006ce <main+0x8e>
	  {
		  htim2.Instance->CCR2 = adc_norm_val[1];
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <main+0xa0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	639a      	str	r2, [r3, #56]	; 0x38
	  }

	  if (adc_norm_val[2])
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0e1      	beq.n	8000698 <main+0x58>
	  {
		  htim2.Instance->CCR3 = adc_norm_val[2];
 80006d4:	4b02      	ldr	r3, [pc, #8]	; (80006e0 <main+0xa0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	63da      	str	r2, [r3, #60]	; 0x3c
	  merj(hadc, buffers);
 80006dc:	e7dc      	b.n	8000698 <main+0x58>
 80006de:	bf00      	nop
 80006e0:	20000160 	.word	0x20000160
 80006e4:	0800646c 	.word	0x0800646c
 80006e8:	20000000 	.word	0x20000000

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b096      	sub	sp, #88	; 0x58
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	2244      	movs	r2, #68	; 0x44
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f005 fd1a 	bl	8006134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	463b      	mov	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800070e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000712:	f002 fd23 	bl	800315c <HAL_PWREx_ControlVoltageScaling>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800071c:	f000 faa8 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000728:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072a:	2310      	movs	r3, #16
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000732:	2302      	movs	r3, #2
 8000734:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000736:	2304      	movs	r3, #4
 8000738:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 45;
 800073a:	232d      	movs	r3, #45	; 0x2d
 800073c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800073e:	2307      	movs	r3, #7
 8000740:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000742:	2302      	movs	r3, #2
 8000744:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000746:	2304      	movs	r3, #4
 8000748:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fd5a 	bl	8003208 <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800075a:	f000 fa89 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2303      	movs	r3, #3
 8000764:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	2102      	movs	r1, #2
 8000776:	4618      	mov	r0, r3
 8000778:	f003 f922 	bl	80039c0 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000782:	f000 fa75 	bl	8000c70 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3758      	adds	r7, #88	; 0x58
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b0a2      	sub	sp, #136	; 0x88
 8000792:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000794:	463b      	mov	r3, r7
 8000796:	2288      	movs	r2, #136	; 0x88
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f005 fcca 	bl	8006134 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007a4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80007a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007aa:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80007ac:	2302      	movs	r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 80007b0:	2304      	movs	r3, #4
 80007b2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80007b4:	2310      	movs	r3, #16
 80007b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80007b8:	2307      	movs	r3, #7
 80007ba:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007bc:	2302      	movs	r3, #2
 80007be:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80007c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007c8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fb1b 	bl	8003e08 <HAL_RCCEx_PeriphCLKConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 80007d8:	f000 fa4a 	bl	8000c70 <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3788      	adds	r7, #136	; 0x88
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
 8000804:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000806:	4b2f      	ldr	r3, [pc, #188]	; (80008c4 <MX_ADC1_Init+0xe0>)
 8000808:	4a2f      	ldr	r2, [pc, #188]	; (80008c8 <MX_ADC1_Init+0xe4>)
 800080a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800080c:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <MX_ADC1_Init+0xe0>)
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000812:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <MX_ADC1_Init+0xe0>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000818:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <MX_ADC1_Init+0xe0>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800081e:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <MX_ADC1_Init+0xe0>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000824:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <MX_ADC1_Init+0xe0>)
 8000826:	2204      	movs	r2, #4
 8000828:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <MX_ADC1_Init+0xe0>)
 800082c:	2200      	movs	r2, #0
 800082e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000830:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <MX_ADC1_Init+0xe0>)
 8000832:	2200      	movs	r2, #0
 8000834:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <MX_ADC1_Init+0xe0>)
 8000838:	2201      	movs	r2, #1
 800083a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083c:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <MX_ADC1_Init+0xe0>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_ADC1_Init+0xe0>)
 8000846:	2200      	movs	r2, #0
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800084a:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_ADC1_Init+0xe0>)
 800084c:	2200      	movs	r2, #0
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_ADC1_Init+0xe0>)
 8000852:	2200      	movs	r2, #0
 8000854:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_ADC1_Init+0xe0>)
 800085a:	2200      	movs	r2, #0
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_ADC1_Init+0xe0>)
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000866:	4817      	ldr	r0, [pc, #92]	; (80008c4 <MX_ADC1_Init+0xe0>)
 8000868:	f000 feea 	bl	8001640 <HAL_ADC_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000872:	f000 f9fd 	bl	8000c70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4810      	ldr	r0, [pc, #64]	; (80008c4 <MX_ADC1_Init+0xe0>)
 8000882:	f002 f8d9 	bl	8002a38 <HAL_ADCEx_MultiModeConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800088c:	f000 f9f0 	bl	8000c70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_ADC1_Init+0xe8>)
 8000892:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000894:	2306      	movs	r3, #6
 8000896:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000898:	2302      	movs	r3, #2
 800089a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800089c:	237f      	movs	r3, #127	; 0x7f
 800089e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008a0:	2304      	movs	r3, #4
 80008a2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_ADC1_Init+0xe0>)
 80008ae:	f001 fbf5 	bl	800209c <HAL_ADC_ConfigChannel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80008b8:	f000 f9da 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000034 	.word	0x20000034
 80008c8:	50040000 	.word	0x50040000
 80008cc:	04300002 	.word	0x04300002

080008d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008d6:	463b      	mov	r3, r7
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
 80008e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008e6:	4b29      	ldr	r3, [pc, #164]	; (800098c <MX_ADC2_Init+0xbc>)
 80008e8:	4a29      	ldr	r2, [pc, #164]	; (8000990 <MX_ADC2_Init+0xc0>)
 80008ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008ec:	4b27      	ldr	r3, [pc, #156]	; (800098c <MX_ADC2_Init+0xbc>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008f2:	4b26      	ldr	r3, [pc, #152]	; (800098c <MX_ADC2_Init+0xbc>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <MX_ADC2_Init+0xbc>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <MX_ADC2_Init+0xbc>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <MX_ADC2_Init+0xbc>)
 8000906:	2204      	movs	r2, #4
 8000908:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_ADC2_Init+0xbc>)
 800090c:	2200      	movs	r2, #0
 800090e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <MX_ADC2_Init+0xbc>)
 8000912:	2200      	movs	r2, #0
 8000914:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_ADC2_Init+0xbc>)
 8000918:	2201      	movs	r2, #1
 800091a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_ADC2_Init+0xbc>)
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_ADC2_Init+0xbc>)
 8000926:	2200      	movs	r2, #0
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <MX_ADC2_Init+0xbc>)
 800092c:	2200      	movs	r2, #0
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_ADC2_Init+0xbc>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_ADC2_Init+0xbc>)
 800093a:	2200      	movs	r2, #0
 800093c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_ADC2_Init+0xbc>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000946:	4811      	ldr	r0, [pc, #68]	; (800098c <MX_ADC2_Init+0xbc>)
 8000948:	f000 fe7a 	bl	8001640 <HAL_ADC_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000952:	f000 f98d 	bl	8000c70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_ADC2_Init+0xc4>)
 8000958:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800095a:	2306      	movs	r3, #6
 800095c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000962:	237f      	movs	r3, #127	; 0x7f
 8000964:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000966:	2304      	movs	r3, #4
 8000968:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <MX_ADC2_Init+0xbc>)
 8000974:	f001 fb92 	bl	800209c <HAL_ADC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800097e:	f000 f977 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000098 	.word	0x20000098
 8000990:	50040100 	.word	0x50040100
 8000994:	08600004 	.word	0x08600004

08000998 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800099e:	463b      	mov	r3, r7
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80009ae:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <MX_ADC3_Init+0xbc>)
 80009b0:	4a29      	ldr	r2, [pc, #164]	; (8000a58 <MX_ADC3_Init+0xc0>)
 80009b2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <MX_ADC3_Init+0xbc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009ba:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <MX_ADC3_Init+0xbc>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009c0:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <MX_ADC3_Init+0xbc>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009c6:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <MX_ADC3_Init+0xbc>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009cc:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_ADC3_Init+0xbc>)
 80009ce:	2204      	movs	r2, #4
 80009d0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009d2:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <MX_ADC3_Init+0xbc>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009d8:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_ADC3_Init+0xbc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_ADC3_Init+0xbc>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_ADC3_Init+0xbc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_ADC3_Init+0xbc>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_ADC3_Init+0xbc>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_ADC3_Init+0xbc>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_ADC3_Init+0xbc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_ADC3_Init+0xbc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a0e:	4811      	ldr	r0, [pc, #68]	; (8000a54 <MX_ADC3_Init+0xbc>)
 8000a10:	f000 fe16 	bl	8001640 <HAL_ADC_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000a1a:	f000 f929 	bl	8000c70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_ADC3_Init+0xc4>)
 8000a20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a22:	2306      	movs	r3, #6
 8000a24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a2a:	237f      	movs	r3, #127	; 0x7f
 8000a2c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <MX_ADC3_Init+0xbc>)
 8000a3c:	f001 fb2e 	bl	800209c <HAL_ADC_ConfigChannel>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000a46:	f000 f913 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000fc 	.word	0x200000fc
 8000a58:	50040200 	.word	0x50040200
 8000a5c:	0c900008 	.word	0x0c900008

08000a60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a72:	463b      	mov	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
 8000a80:	615a      	str	r2, [r3, #20]
 8000a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a84:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <MX_TIM2_Init+0xe0>)
 8000a86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000a8c:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <MX_TIM2_Init+0xe0>)
 8000a8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a94:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <MX_TIM2_Init+0xe0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 900-1;
 8000a9a:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <MX_TIM2_Init+0xe0>)
 8000a9c:	f240 3283 	movw	r2, #899	; 0x383
 8000aa0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa2:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <MX_TIM2_Init+0xe0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aa8:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <MX_TIM2_Init+0xe0>)
 8000aaa:	2280      	movs	r2, #128	; 0x80
 8000aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aae:	4824      	ldr	r0, [pc, #144]	; (8000b40 <MX_TIM2_Init+0xe0>)
 8000ab0:	f003 fe66 	bl	8004780 <HAL_TIM_PWM_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000aba:	f000 f8d9 	bl	8000c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	481c      	ldr	r0, [pc, #112]	; (8000b40 <MX_TIM2_Init+0xe0>)
 8000ace:	f004 fdb1 	bl	8005634 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000ad8:	f000 f8ca 	bl	8000c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000adc:	2360      	movs	r3, #96	; 0x60
 8000ade:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 25;
 8000ae0:	2319      	movs	r3, #25
 8000ae2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	2200      	movs	r2, #0
 8000af0:	4619      	mov	r1, r3
 8000af2:	4813      	ldr	r0, [pc, #76]	; (8000b40 <MX_TIM2_Init+0xe0>)
 8000af4:	f004 f8c2 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000afe:	f000 f8b7 	bl	8000c70 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b06:	463b      	mov	r3, r7
 8000b08:	2204      	movs	r2, #4
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <MX_TIM2_Init+0xe0>)
 8000b0e:	f004 f8b5 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000b18:	f000 f8aa 	bl	8000c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	2208      	movs	r2, #8
 8000b20:	4619      	mov	r1, r3
 8000b22:	4807      	ldr	r0, [pc, #28]	; (8000b40 <MX_TIM2_Init+0xe0>)
 8000b24:	f004 f8aa 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000b2e:	f000 f89f 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b32:	4803      	ldr	r0, [pc, #12]	; (8000b40 <MX_TIM2_Init+0xe0>)
 8000b34:	f000 f9b6 	bl	8000ea4 <HAL_TIM_MspPostInit>

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000160 	.word	0x20000160

08000b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <MX_USART2_UART_Init+0x5c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b88:	f004 fdfa 	bl	8005780 <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b92:	f000 f86d 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200001ac 	.word	0x200001ac
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a2a      	ldr	r2, [pc, #168]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd2:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a24      	ldr	r2, [pc, #144]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4a1e      	ldr	r2, [pc, #120]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_GPIO_Init+0xc4>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c22:	f002 fa75 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c2c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480b      	ldr	r0, [pc, #44]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000c3e:	f002 f8bd 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c42:	2320      	movs	r3, #32
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f002 f8ae 	bl	8002dbc <HAL_GPIO_Init>

}
 8000c60:	bf00      	nop
 8000c62:	3728      	adds	r7, #40	; 0x28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	48000800 	.word	0x48000800

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c86:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_MspInit+0x44>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <HAL_MspInit+0x44>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_MspInit+0x44>)
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08e      	sub	sp, #56	; 0x38
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a58      	ldr	r2, [pc, #352]	; (8000e44 <HAL_ADC_MspInit+0x180>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d135      	bne.n	8000d52 <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000ce6:	4b58      	ldr	r3, [pc, #352]	; (8000e48 <HAL_ADC_MspInit+0x184>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	3301      	adds	r3, #1
 8000cec:	4a56      	ldr	r2, [pc, #344]	; (8000e48 <HAL_ADC_MspInit+0x184>)
 8000cee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000cf0:	4b55      	ldr	r3, [pc, #340]	; (8000e48 <HAL_ADC_MspInit+0x184>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d10b      	bne.n	8000d10 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000cf8:	4b54      	ldr	r3, [pc, #336]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfc:	4a53      	ldr	r2, [pc, #332]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000cfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d04:	4b51      	ldr	r3, [pc, #324]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d0c:	623b      	str	r3, [r7, #32]
 8000d0e:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d10:	4b4e      	ldr	r3, [pc, #312]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d14:	4a4d      	ldr	r2, [pc, #308]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1c:	4b4b      	ldr	r3, [pc, #300]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	61fb      	str	r3, [r7, #28]
 8000d26:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d2c:	230b      	movs	r3, #11
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4845      	ldr	r0, [pc, #276]	; (8000e50 <HAL_ADC_MspInit+0x18c>)
 8000d3c:	f002 f83e 	bl	8002dbc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	2012      	movs	r0, #18
 8000d46:	f002 f802 	bl	8002d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d4a:	2012      	movs	r0, #18
 8000d4c:	f002 f81b 	bl	8002d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000d50:	e074      	b.n	8000e3c <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC2)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a3f      	ldr	r2, [pc, #252]	; (8000e54 <HAL_ADC_MspInit+0x190>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d135      	bne.n	8000dc8 <HAL_ADC_MspInit+0x104>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000d5c:	4b3a      	ldr	r3, [pc, #232]	; (8000e48 <HAL_ADC_MspInit+0x184>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a39      	ldr	r2, [pc, #228]	; (8000e48 <HAL_ADC_MspInit+0x184>)
 8000d64:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000d66:	4b38      	ldr	r3, [pc, #224]	; (8000e48 <HAL_ADC_MspInit+0x184>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d10b      	bne.n	8000d86 <HAL_ADC_MspInit+0xc2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000d6e:	4b37      	ldr	r3, [pc, #220]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	4a36      	ldr	r2, [pc, #216]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000d74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7a:	4b34      	ldr	r3, [pc, #208]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4a30      	ldr	r2, [pc, #192]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000da2:	230b      	movs	r3, #11
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	4827      	ldr	r0, [pc, #156]	; (8000e50 <HAL_ADC_MspInit+0x18c>)
 8000db2:	f002 f803 	bl	8002dbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2012      	movs	r0, #18
 8000dbc:	f001 ffc7 	bl	8002d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000dc0:	2012      	movs	r0, #18
 8000dc2:	f001 ffe0 	bl	8002d86 <HAL_NVIC_EnableIRQ>
}
 8000dc6:	e039      	b.n	8000e3c <HAL_ADC_MspInit+0x178>
  else if(hadc->Instance==ADC3)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <HAL_ADC_MspInit+0x194>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d134      	bne.n	8000e3c <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_ADC_MspInit+0x184>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <HAL_ADC_MspInit+0x184>)
 8000dda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <HAL_ADC_MspInit+0x184>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d10b      	bne.n	8000dfc <HAL_ADC_MspInit+0x138>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de8:	4a18      	ldr	r2, [pc, #96]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000dea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e00:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e08:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <HAL_ADC_MspInit+0x188>)
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e14:	2304      	movs	r3, #4
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e18:	230b      	movs	r3, #11
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	480a      	ldr	r0, [pc, #40]	; (8000e50 <HAL_ADC_MspInit+0x18c>)
 8000e28:	f001 ffc8 	bl	8002dbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	202f      	movs	r0, #47	; 0x2f
 8000e32:	f001 ff8c 	bl	8002d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000e36:	202f      	movs	r0, #47	; 0x2f
 8000e38:	f001 ffa5 	bl	8002d86 <HAL_NVIC_EnableIRQ>
}
 8000e3c:	bf00      	nop
 8000e3e:	3738      	adds	r7, #56	; 0x38
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	50040000 	.word	0x50040000
 8000e48:	20000488 	.word	0x20000488
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	48000800 	.word	0x48000800
 8000e54:	50040100 	.word	0x50040100
 8000e58:	50040200 	.word	0x50040200

08000e5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e6c:	d113      	bne.n	8000e96 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x44>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x44>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6593      	str	r3, [r2, #88]	; 0x58
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x44>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	201c      	movs	r0, #28
 8000e8c:	f001 ff5f 	bl	8002d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e90:	201c      	movs	r0, #28
 8000e92:	f001 ff78 	bl	8002d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec4:	d139      	bne.n	8000f3a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <HAL_TIM_MspPostInit+0xa0>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <HAL_TIM_MspPostInit+0xa0>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <HAL_TIM_MspPostInit+0xa0>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_TIM_MspPostInit+0xa0>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	4a18      	ldr	r2, [pc, #96]	; (8000f44 <HAL_TIM_MspPostInit+0xa0>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <HAL_TIM_MspPostInit+0xa0>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f06:	2301      	movs	r3, #1
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f001 ff52 	bl	8002dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <HAL_TIM_MspPostInit+0xa4>)
 8000f36:	f001 ff41 	bl	8002dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3728      	adds	r7, #40	; 0x28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000
 8000f48:	48000400 	.word	0x48000400

08000f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0ac      	sub	sp, #176	; 0xb0
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2288      	movs	r2, #136	; 0x88
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f005 f8e1 	bl	8006134 <memset>
  if(huart->Instance==USART2)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <HAL_UART_MspInit+0xb0>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d13b      	bne.n	8000ff4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f002 ff3d 	bl	8003e08 <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f94:	f7ff fe6c 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_UART_MspInit+0xb4>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9c:	4a18      	ldr	r2, [pc, #96]	; (8001000 <HAL_UART_MspInit+0xb4>)
 8000f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa2:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_UART_MspInit+0xb4>)
 8000fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <HAL_UART_MspInit+0xb4>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	4a12      	ldr	r2, [pc, #72]	; (8001000 <HAL_UART_MspInit+0xb4>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <HAL_UART_MspInit+0xb4>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fc8:	230c      	movs	r3, #12
 8000fca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff0:	f001 fee4 	bl	8002dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	37b0      	adds	r7, #176	; 0xb0
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40004400 	.word	0x40004400
 8001000:	40021000 	.word	0x40021000

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <NMI_Handler+0x4>

0800100a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <MemManage_Handler+0x4>

08001016 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <UsageFault_Handler+0x4>

08001022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001050:	f000 f8bc 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800105c:	4803      	ldr	r0, [pc, #12]	; (800106c <ADC1_2_IRQHandler+0x14>)
 800105e:	f000 fde5 	bl	8001c2c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001062:	4803      	ldr	r0, [pc, #12]	; (8001070 <ADC1_2_IRQHandler+0x18>)
 8001064:	f000 fde2 	bl	8001c2c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000034 	.word	0x20000034
 8001070:	20000098 	.word	0x20000098

08001074 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <TIM2_IRQHandler+0x10>)
 800107a:	f003 fcdf 	bl	8004a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000160 	.word	0x20000160

08001088 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <ADC3_IRQHandler+0x10>)
 800108e:	f000 fdcd 	bl	8001c2c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000fc 	.word	0x200000fc

0800109c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <SystemInit+0x20>)
 80010a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <SystemInit+0x20>)
 80010a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c4:	f7ff ffea 	bl	800109c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <LoopForever+0x6>)
  ldr r1, =_edata
 80010ca:	490d      	ldr	r1, [pc, #52]	; (8001100 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <LoopForever+0xe>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e0:	4c0a      	ldr	r4, [pc, #40]	; (800110c <LoopForever+0x16>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ee:	f004 fffd 	bl	80060ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010f2:	f7ff faa5 	bl	8000640 <main>

080010f6 <LoopForever>:

LoopForever:
    b LoopForever
 80010f6:	e7fe      	b.n	80010f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001100:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001104:	080064d0 	.word	0x080064d0
  ldr r2, =_sbss
 8001108:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800110c:	20000490 	.word	0x20000490

08001110 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <CAN1_RX0_IRQHandler>
	...

08001114 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_Init+0x3c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <HAL_Init+0x3c>)
 8001124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001128:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112a:	2003      	movs	r0, #3
 800112c:	f001 fe04 	bl	8002d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001130:	2000      	movs	r0, #0
 8001132:	f000 f80f 	bl	8001154 <HAL_InitTick>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d002      	beq.n	8001142 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	e001      	b.n	8001146 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001142:	f7ff fd9b 	bl	8000c7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001146:	79fb      	ldrb	r3, [r7, #7]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40022000 	.word	0x40022000

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_InitTick+0x6c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d023      	beq.n	80011b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_InitTick+0x70>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_InitTick+0x6c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	fbb3 f3f1 	udiv	r3, r3, r1
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fe0f 	bl	8002da2 <HAL_SYSTICK_Config>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10f      	bne.n	80011aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b0f      	cmp	r3, #15
 800118e:	d809      	bhi.n	80011a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001190:	2200      	movs	r2, #0
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f001 fdd9 	bl	8002d4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800119c:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_InitTick+0x74>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e007      	b.n	80011b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e004      	b.n	80011b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	73fb      	strb	r3, [r7, #15]
 80011ae:	e001      	b.n	80011b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000014 	.word	0x20000014
 80011c4:	2000000c 	.word	0x2000000c
 80011c8:	20000010 	.word	0x20000010

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000014 	.word	0x20000014
 80011f0:	2000048c 	.word	0x2000048c

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	2000048c 	.word	0x2000048c

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff ffee 	bl	80011f4 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_Delay+0x44>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffde 	bl	80011f4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000014 	.word	0x20000014

08001254 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	431a      	orrs	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	609a      	str	r2, [r3, #8]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	609a      	str	r2, [r3, #8]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3360      	adds	r3, #96	; 0x60
 80012ce:	461a      	mov	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <LL_ADC_SetOffset+0x44>)
 80012de:	4013      	ands	r3, r2
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	4313      	orrs	r3, r2
 80012ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012f4:	bf00      	nop
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	03fff000 	.word	0x03fff000

08001304 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3360      	adds	r3, #96	; 0x60
 8001312:	461a      	mov	r2, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3360      	adds	r3, #96	; 0x60
 8001340:	461a      	mov	r2, r3
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	431a      	orrs	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800135a:	bf00      	nop
 800135c:	371c      	adds	r7, #28
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3330      	adds	r3, #48	; 0x30
 800139c:	461a      	mov	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	f003 030c 	and.w	r3, r3, #12
 80013a8:	4413      	add	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	f003 031f 	and.w	r3, r3, #31
 80013b6:	211f      	movs	r1, #31
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	401a      	ands	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	0e9b      	lsrs	r3, r3, #26
 80013c4:	f003 011f 	and.w	r1, r3, #31
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	431a      	orrs	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013d8:	bf00      	nop
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800140a:	b480      	push	{r7}
 800140c:	b087      	sub	sp, #28
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3314      	adds	r3, #20
 800141a:	461a      	mov	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	0e5b      	lsrs	r3, r3, #25
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	4413      	add	r3, r2
 8001428:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	0d1b      	lsrs	r3, r3, #20
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	2107      	movs	r1, #7
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	401a      	ands	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	0d1b      	lsrs	r3, r3, #20
 8001444:	f003 031f 	and.w	r3, r3, #31
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	431a      	orrs	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001454:	bf00      	nop
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001478:	43db      	mvns	r3, r3
 800147a:	401a      	ands	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0318 	and.w	r3, r3, #24
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001484:	40d9      	lsrs	r1, r3
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	400b      	ands	r3, r1
 800148a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800148e:	431a      	orrs	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	0007ffff 	.word	0x0007ffff

080014a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 031f 	and.w	r3, r3, #31
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6093      	str	r3, [r2, #8]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001518:	d101      	bne.n	800151e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800153c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001540:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001568:	d101      	bne.n	800156e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800158c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001590:	f043 0201 	orr.w	r2, r3, #1
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <LL_ADC_IsEnabled+0x18>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <LL_ADC_IsEnabled+0x1a>
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015de:	f043 0204 	orr.w	r2, r3, #4
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b04      	cmp	r3, #4
 8001604:	d101      	bne.n	800160a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b08      	cmp	r3, #8
 800162a:	d101      	bne.n	8001630 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e136      	b.n	80018c8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001664:	2b00      	cmp	r3, #0
 8001666:	d109      	bne.n	800167c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fb2b 	bl	8000cc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff3f 	bl	8001504 <LL_ADC_IsDeepPowerDownEnabled>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff25 	bl	80014e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff5a 	bl	8001554 <LL_ADC_IsInternalRegulatorEnabled>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d115      	bne.n	80016d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff3e 	bl	800152c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016b0:	4b87      	ldr	r3, [pc, #540]	; (80018d0 <HAL_ADC_Init+0x290>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	099b      	lsrs	r3, r3, #6
 80016b6:	4a87      	ldr	r2, [pc, #540]	; (80018d4 <HAL_ADC_Init+0x294>)
 80016b8:	fba2 2303 	umull	r2, r3, r2, r3
 80016bc:	099b      	lsrs	r3, r3, #6
 80016be:	3301      	adds	r3, #1
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016c4:	e002      	b.n	80016cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f9      	bne.n	80016c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ff3c 	bl	8001554 <LL_ADC_IsInternalRegulatorEnabled>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10d      	bne.n	80016fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e6:	f043 0210 	orr.w	r2, r3, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	f043 0201 	orr.w	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff75 	bl	80015f2 <LL_ADC_REG_IsConversionOngoing>
 8001708:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 80cf 	bne.w	80018b6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f040 80cb 	bne.w	80018b6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001724:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001728:	f043 0202 	orr.w	r2, r3, #2
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff35 	bl	80015a4 <LL_ADC_IsEnabled>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d115      	bne.n	800176c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001740:	4865      	ldr	r0, [pc, #404]	; (80018d8 <HAL_ADC_Init+0x298>)
 8001742:	f7ff ff2f 	bl	80015a4 <LL_ADC_IsEnabled>
 8001746:	4604      	mov	r4, r0
 8001748:	4864      	ldr	r0, [pc, #400]	; (80018dc <HAL_ADC_Init+0x29c>)
 800174a:	f7ff ff2b 	bl	80015a4 <LL_ADC_IsEnabled>
 800174e:	4603      	mov	r3, r0
 8001750:	431c      	orrs	r4, r3
 8001752:	4863      	ldr	r0, [pc, #396]	; (80018e0 <HAL_ADC_Init+0x2a0>)
 8001754:	f7ff ff26 	bl	80015a4 <LL_ADC_IsEnabled>
 8001758:	4603      	mov	r3, r0
 800175a:	4323      	orrs	r3, r4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d105      	bne.n	800176c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4619      	mov	r1, r3
 8001766:	485f      	ldr	r0, [pc, #380]	; (80018e4 <HAL_ADC_Init+0x2a4>)
 8001768:	f7ff fd74 	bl	8001254 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7e5b      	ldrb	r3, [r3, #25]
 8001770:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001776:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800177c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001782:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800178a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d106      	bne.n	80017a8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	3b01      	subs	r3, #1
 80017a0:	045b      	lsls	r3, r3, #17
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_ADC_Init+0x2a8>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	69b9      	ldr	r1, [r7, #24]
 80017d4:	430b      	orrs	r3, r1
 80017d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff08 	bl	80015f2 <LL_ADC_REG_IsConversionOngoing>
 80017e2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff15 	bl	8001618 <LL_ADC_INJ_IsConversionOngoing>
 80017ee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d13d      	bne.n	8001872 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d13a      	bne.n	8001872 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001800:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001808:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001818:	f023 0302 	bic.w	r3, r3, #2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	69b9      	ldr	r1, [r7, #24]
 8001822:	430b      	orrs	r3, r1
 8001824:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800182c:	2b01      	cmp	r3, #1
 800182e:	d118      	bne.n	8001862 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800183a:	f023 0304 	bic.w	r3, r3, #4
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001846:	4311      	orrs	r1, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800184c:	4311      	orrs	r1, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001852:	430a      	orrs	r2, r1
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	611a      	str	r2, [r3, #16]
 8001860:	e007      	b.n	8001872 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0201 	bic.w	r2, r2, #1
 8001870:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d10c      	bne.n	8001894 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	f023 010f 	bic.w	r1, r3, #15
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	1e5a      	subs	r2, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
 8001892:	e007      	b.n	80018a4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 020f 	bic.w	r2, r2, #15
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a8:	f023 0303 	bic.w	r3, r3, #3
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	655a      	str	r2, [r3, #84]	; 0x54
 80018b4:	e007      	b.n	80018c6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ba:	f043 0210 	orr.w	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3724      	adds	r7, #36	; 0x24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd90      	pop	{r4, r7, pc}
 80018d0:	2000000c 	.word	0x2000000c
 80018d4:	053e2d63 	.word	0x053e2d63
 80018d8:	50040000 	.word	0x50040000
 80018dc:	50040100 	.word	0x50040100
 80018e0:	50040200 	.word	0x50040200
 80018e4:	50040300 	.word	0x50040300
 80018e8:	fff0c007 	.word	0xfff0c007

080018ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018f4:	4857      	ldr	r0, [pc, #348]	; (8001a54 <HAL_ADC_Start+0x168>)
 80018f6:	f7ff fdd7 	bl	80014a8 <LL_ADC_GetMultimode>
 80018fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fe76 	bl	80015f2 <LL_ADC_REG_IsConversionOngoing>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	f040 809c 	bne.w	8001a46 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_ADC_Start+0x30>
 8001918:	2302      	movs	r3, #2
 800191a:	e097      	b.n	8001a4c <HAL_ADC_Start+0x160>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 ffa9 	bl	800287c <ADC_Enable>
 800192a:	4603      	mov	r3, r0
 800192c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	2b00      	cmp	r3, #0
 8001932:	f040 8083 	bne.w	8001a3c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a42      	ldr	r2, [pc, #264]	; (8001a58 <HAL_ADC_Start+0x16c>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d002      	beq.n	800195a <HAL_ADC_Start+0x6e>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	e000      	b.n	800195c <HAL_ADC_Start+0x70>
 800195a:	4b40      	ldr	r3, [pc, #256]	; (8001a5c <HAL_ADC_Start+0x170>)
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	4293      	cmp	r3, r2
 8001962:	d002      	beq.n	800196a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d105      	bne.n	8001976 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800197e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001982:	d106      	bne.n	8001992 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	f023 0206 	bic.w	r2, r3, #6
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	659a      	str	r2, [r3, #88]	; 0x58
 8001990:	e002      	b.n	8001998 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	221c      	movs	r2, #28
 800199e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a2a      	ldr	r2, [pc, #168]	; (8001a58 <HAL_ADC_Start+0x16c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d002      	beq.n	80019b8 <HAL_ADC_Start+0xcc>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	e000      	b.n	80019ba <HAL_ADC_Start+0xce>
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_ADC_Start+0x170>)
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	4293      	cmp	r3, r2
 80019c0:	d008      	beq.n	80019d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d002      	beq.n	80019d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	2b09      	cmp	r3, #9
 80019d2:	d114      	bne.n	80019fe <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fde7 	bl	80015ca <LL_ADC_REG_StartConversion>
 80019fc:	e025      	b.n	8001a4a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <HAL_ADC_Start+0x16c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d002      	beq.n	8001a1a <HAL_ADC_Start+0x12e>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	e000      	b.n	8001a1c <HAL_ADC_Start+0x130>
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_ADC_Start+0x170>)
 8001a1c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00f      	beq.n	8001a4a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	655a      	str	r2, [r3, #84]	; 0x54
 8001a3a:	e006      	b.n	8001a4a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a44:	e001      	b.n	8001a4a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a46:	2302      	movs	r3, #2
 8001a48:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	50040300 	.word	0x50040300
 8001a58:	50040100 	.word	0x50040100
 8001a5c:	50040000 	.word	0x50040000

08001a60 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a6a:	4866      	ldr	r0, [pc, #408]	; (8001c04 <HAL_ADC_PollForConversion+0x1a4>)
 8001a6c:	f7ff fd1c 	bl	80014a8 <LL_ADC_GetMultimode>
 8001a70:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d102      	bne.n	8001a80 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	e02a      	b.n	8001ad6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	d002      	beq.n	8001a92 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2b09      	cmp	r3, #9
 8001a90:	d111      	bne.n	8001ab6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d007      	beq.n	8001ab0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa4:	f043 0220 	orr.w	r2, r3, #32
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0a4      	b.n	8001bfa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001ab4:	e00f      	b.n	8001ad6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001ab6:	4853      	ldr	r0, [pc, #332]	; (8001c04 <HAL_ADC_PollForConversion+0x1a4>)
 8001ab8:	f7ff fd04 	bl	80014c4 <LL_ADC_GetMultiDMATransfer>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac6:	f043 0220 	orr.w	r2, r3, #32
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e093      	b.n	8001bfa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ad6:	f7ff fb8d 	bl	80011f4 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001adc:	e021      	b.n	8001b22 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae4:	d01d      	beq.n	8001b22 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ae6:	f7ff fb85 	bl	80011f4 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d302      	bcc.n	8001afc <HAL_ADC_PollForConversion+0x9c>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d112      	bne.n	8001b22 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10b      	bne.n	8001b22 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0e:	f043 0204 	orr.w	r2, r3, #4
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e06b      	b.n	8001bfa <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0d6      	beq.n	8001ade <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fc10 	bl	8001366 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d01c      	beq.n	8001b86 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7e5b      	ldrb	r3, [r3, #25]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d118      	bne.n	8001b86 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d111      	bne.n	8001b86 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d105      	bne.n	8001b86 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	f043 0201 	orr.w	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <HAL_ADC_PollForConversion+0x1a8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d002      	beq.n	8001b96 <HAL_ADC_PollForConversion+0x136>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	e000      	b.n	8001b98 <HAL_ADC_PollForConversion+0x138>
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_ADC_PollForConversion+0x1ac>)
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d008      	beq.n	8001bb2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d002      	beq.n	8001bb2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b09      	cmp	r3, #9
 8001bb0:	d104      	bne.n	8001bbc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	e00c      	b.n	8001bd6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <HAL_ADC_PollForConversion+0x1a8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d002      	beq.n	8001bcc <HAL_ADC_PollForConversion+0x16c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	e000      	b.n	8001bce <HAL_ADC_PollForConversion+0x16e>
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_ADC_PollForConversion+0x1ac>)
 8001bce:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d104      	bne.n	8001be6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2208      	movs	r2, #8
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	e008      	b.n	8001bf8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d103      	bne.n	8001bf8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	220c      	movs	r2, #12
 8001bf6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	50040300 	.word	0x50040300
 8001c08:	50040100 	.word	0x50040100
 8001c0c:	50040000 	.word	0x50040000

08001c10 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c48:	4882      	ldr	r0, [pc, #520]	; (8001e54 <HAL_ADC_IRQHandler+0x228>)
 8001c4a:	f7ff fc2d 	bl	80014a8 <LL_ADC_GetMultimode>
 8001c4e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d017      	beq.n	8001c8a <HAL_ADC_IRQHandler+0x5e>
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d012      	beq.n	8001c8a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d105      	bne.n	8001c7c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c74:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 fed1 	bl	8002a24 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2202      	movs	r2, #2
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <HAL_ADC_IRQHandler+0x72>
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10a      	bne.n	8001cb4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 8083 	beq.w	8001db0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d07d      	beq.n	8001db0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fb48 	bl	8001366 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d062      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a5d      	ldr	r2, [pc, #372]	; (8001e58 <HAL_ADC_IRQHandler+0x22c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d002      	beq.n	8001cec <HAL_ADC_IRQHandler+0xc0>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	e000      	b.n	8001cee <HAL_ADC_IRQHandler+0xc2>
 8001cec:	4b5b      	ldr	r3, [pc, #364]	; (8001e5c <HAL_ADC_IRQHandler+0x230>)
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d008      	beq.n	8001d08 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d002      	beq.n	8001d08 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b09      	cmp	r3, #9
 8001d06:	d104      	bne.n	8001d12 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	623b      	str	r3, [r7, #32]
 8001d10:	e00c      	b.n	8001d2c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a50      	ldr	r2, [pc, #320]	; (8001e58 <HAL_ADC_IRQHandler+0x22c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d002      	beq.n	8001d22 <HAL_ADC_IRQHandler+0xf6>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	e000      	b.n	8001d24 <HAL_ADC_IRQHandler+0xf8>
 8001d22:	4b4e      	ldr	r3, [pc, #312]	; (8001e5c <HAL_ADC_IRQHandler+0x230>)
 8001d24:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d135      	bne.n	8001da2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d12e      	bne.n	8001da2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fc52 	bl	80015f2 <LL_ADC_REG_IsConversionOngoing>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d11a      	bne.n	8001d8a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 020c 	bic.w	r2, r2, #12
 8001d62:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d112      	bne.n	8001da2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d80:	f043 0201 	orr.w	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	655a      	str	r2, [r3, #84]	; 0x54
 8001d88:	e00b      	b.n	8001da2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8e:	f043 0210 	orr.w	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	f043 0201 	orr.w	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f95c 	bl	8002060 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	220c      	movs	r2, #12
 8001dae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <HAL_ADC_IRQHandler+0x198>
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10b      	bne.n	8001ddc <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 809f 	beq.w	8001f0e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8099 	beq.w	8001f0e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d105      	bne.n	8001df4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff faf3 	bl	80013e4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001dfe:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff faae 	bl	8001366 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e0a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <HAL_ADC_IRQHandler+0x22c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d002      	beq.n	8001e1c <HAL_ADC_IRQHandler+0x1f0>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	e000      	b.n	8001e1e <HAL_ADC_IRQHandler+0x1f2>
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_ADC_IRQHandler+0x230>)
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d008      	beq.n	8001e38 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d002      	beq.n	8001e38 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b07      	cmp	r3, #7
 8001e36:	d104      	bne.n	8001e42 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	623b      	str	r3, [r7, #32]
 8001e40:	e013      	b.n	8001e6a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_ADC_IRQHandler+0x22c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d009      	beq.n	8001e60 <HAL_ADC_IRQHandler+0x234>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	e007      	b.n	8001e62 <HAL_ADC_IRQHandler+0x236>
 8001e52:	bf00      	nop
 8001e54:	50040300 	.word	0x50040300
 8001e58:	50040100 	.word	0x50040100
 8001e5c:	50040000 	.word	0x50040000
 8001e60:	4b7d      	ldr	r3, [pc, #500]	; (8002058 <HAL_ADC_IRQHandler+0x42c>)
 8001e62:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d047      	beq.n	8001f00 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_ADC_IRQHandler+0x25e>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d03f      	beq.n	8001f00 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d13a      	bne.n	8001f00 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	2b40      	cmp	r3, #64	; 0x40
 8001e96:	d133      	bne.n	8001f00 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d12e      	bne.n	8001f00 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fbb6 	bl	8001618 <LL_ADC_INJ_IsConversionOngoing>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d11a      	bne.n	8001ee8 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ec0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d112      	bne.n	8001f00 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ede:	f043 0201 	orr.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
 8001ee6:	e00b      	b.n	8001f00 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eec:	f043 0210 	orr.w	r2, r3, #16
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fd67 	bl	80029d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2260      	movs	r2, #96	; 0x60
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d011      	beq.n	8001f3c <HAL_ADC_IRQHandler+0x310>
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f8a0 	bl	8002074 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2280      	movs	r2, #128	; 0x80
 8001f3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d012      	beq.n	8001f6c <HAL_ADC_IRQHandler+0x340>
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00d      	beq.n	8001f6c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fd4d 	bl	80029fc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d012      	beq.n	8001f9c <HAL_ADC_IRQHandler+0x370>
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00d      	beq.n	8001f9c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fd3f 	bl	8002a10 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d036      	beq.n	8002014 <HAL_ADC_IRQHandler+0x3e8>
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d031      	beq.n	8002014 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d102      	bne.n	8001fbe <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbc:	e014      	b.n	8001fe8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001fc4:	4825      	ldr	r0, [pc, #148]	; (800205c <HAL_ADC_IRQHandler+0x430>)
 8001fc6:	f7ff fa7d 	bl	80014c4 <LL_ADC_GetMultiDMATransfer>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00b      	beq.n	8001fe8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd4:	e008      	b.n	8001fe8 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d10e      	bne.n	800200c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	f043 0202 	orr.w	r2, r3, #2
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f83e 	bl	8002088 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2210      	movs	r2, #16
 8002012:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201a:	2b00      	cmp	r3, #0
 800201c:	d018      	beq.n	8002050 <HAL_ADC_IRQHandler+0x424>
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002024:	2b00      	cmp	r3, #0
 8002026:	d013      	beq.n	8002050 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	f043 0208 	orr.w	r2, r3, #8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002048:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fccc 	bl	80029e8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002050:	bf00      	nop
 8002052:	3728      	adds	r7, #40	; 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	50040000 	.word	0x50040000
 800205c:	50040300 	.word	0x50040300

08002060 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b0b6      	sub	sp, #216	; 0xd8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_ADC_ConfigChannel+0x22>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e3c7      	b.n	800284e <HAL_ADC_ConfigChannel+0x7b2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fa91 	bl	80015f2 <LL_ADC_REG_IsConversionOngoing>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 83a8 	bne.w	8002828 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d824      	bhi.n	800212a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	3b02      	subs	r3, #2
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d81b      	bhi.n	8002122 <HAL_ADC_ConfigChannel+0x86>
 80020ea:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <HAL_ADC_ConfigChannel+0x54>)
 80020ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f0:	08002101 	.word	0x08002101
 80020f4:	08002109 	.word	0x08002109
 80020f8:	08002111 	.word	0x08002111
 80020fc:	08002119 	.word	0x08002119
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	220c      	movs	r2, #12
 8002104:	605a      	str	r2, [r3, #4]
          break;
 8002106:	e011      	b.n	800212c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2212      	movs	r2, #18
 800210c:	605a      	str	r2, [r3, #4]
          break;
 800210e:	e00d      	b.n	800212c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	2218      	movs	r2, #24
 8002114:	605a      	str	r2, [r3, #4]
          break;
 8002116:	e009      	b.n	800212c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800211e:	605a      	str	r2, [r3, #4]
          break;
 8002120:	e004      	b.n	800212c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2206      	movs	r2, #6
 8002126:	605a      	str	r2, [r3, #4]
          break;
 8002128:	e000      	b.n	800212c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800212a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6859      	ldr	r1, [r3, #4]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	f7ff f927 	bl	800138c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fa55 	bl	80015f2 <LL_ADC_REG_IsConversionOngoing>
 8002148:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fa61 	bl	8001618 <LL_ADC_INJ_IsConversionOngoing>
 8002156:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800215a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800215e:	2b00      	cmp	r3, #0
 8002160:	f040 81a6 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002164:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002168:	2b00      	cmp	r3, #0
 800216a:	f040 81a1 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	6819      	ldr	r1, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	461a      	mov	r2, r3
 800217c:	f7ff f945 	bl	800140a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	08db      	lsrs	r3, r3, #3
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d00a      	beq.n	80021b8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6919      	ldr	r1, [r3, #16]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021b2:	f7ff f883 	bl	80012bc <LL_ADC_SetOffset>
 80021b6:	e17b      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff f8a0 	bl	8001304 <LL_ADC_GetOffsetChannel>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10a      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x148>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff f895 	bl	8001304 <LL_ADC_GetOffsetChannel>
 80021da:	4603      	mov	r3, r0
 80021dc:	0e9b      	lsrs	r3, r3, #26
 80021de:	f003 021f 	and.w	r2, r3, #31
 80021e2:	e01e      	b.n	8002222 <HAL_ADC_ConfigChannel+0x186>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f88a 	bl	8001304 <LL_ADC_GetOffsetChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002202:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002206:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800220a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002212:	2320      	movs	r3, #32
 8002214:	e004      	b.n	8002220 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002216:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222a:	2b00      	cmp	r3, #0
 800222c:	d105      	bne.n	800223a <HAL_ADC_ConfigChannel+0x19e>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	0e9b      	lsrs	r3, r3, #26
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	e018      	b.n	800226c <HAL_ADC_ConfigChannel+0x1d0>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800224e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002252:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002256:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800225e:	2320      	movs	r3, #32
 8002260:	e004      	b.n	800226c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800226c:	429a      	cmp	r2, r3
 800226e:	d106      	bne.n	800227e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff f859 	bl	8001330 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2101      	movs	r1, #1
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff f83d 	bl	8001304 <LL_ADC_GetOffsetChannel>
 800228a:	4603      	mov	r3, r0
 800228c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10a      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x20e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2101      	movs	r1, #1
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff f832 	bl	8001304 <LL_ADC_GetOffsetChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	0e9b      	lsrs	r3, r3, #26
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	e01e      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x24c>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2101      	movs	r1, #1
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff f827 	bl	8001304 <LL_ADC_GetOffsetChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80022d8:	2320      	movs	r3, #32
 80022da:	e004      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80022dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022e0:	fab3 f383 	clz	r3, r3
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x264>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	0e9b      	lsrs	r3, r3, #26
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	e018      	b.n	8002332 <HAL_ADC_ConfigChannel+0x296>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002314:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800231c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002324:	2320      	movs	r3, #32
 8002326:	e004      	b.n	8002332 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002328:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002332:	429a      	cmp	r2, r3
 8002334:	d106      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2200      	movs	r2, #0
 800233c:	2101      	movs	r1, #1
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fff6 	bl	8001330 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2102      	movs	r1, #2
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe ffda 	bl	8001304 <LL_ADC_GetOffsetChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10a      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x2d4>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2102      	movs	r1, #2
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe ffcf 	bl	8001304 <LL_ADC_GetOffsetChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	0e9b      	lsrs	r3, r3, #26
 800236a:	f003 021f 	and.w	r2, r3, #31
 800236e:	e01e      	b.n	80023ae <HAL_ADC_ConfigChannel+0x312>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2102      	movs	r1, #2
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe ffc4 	bl	8001304 <LL_ADC_GetOffsetChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800238e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002396:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800239e:	2320      	movs	r3, #32
 80023a0:	e004      	b.n	80023ac <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80023a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x32a>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	0e9b      	lsrs	r3, r3, #26
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	e016      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x358>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80023e6:	2320      	movs	r3, #32
 80023e8:	e004      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80023ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d106      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2200      	movs	r2, #0
 80023fe:	2102      	movs	r1, #2
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe ff95 	bl	8001330 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2103      	movs	r1, #3
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe ff79 	bl	8001304 <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x396>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2103      	movs	r1, #3
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe ff6e 	bl	8001304 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	0e9b      	lsrs	r3, r3, #26
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	e017      	b.n	8002462 <HAL_ADC_ConfigChannel+0x3c6>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2103      	movs	r1, #3
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe ff63 	bl	8001304 <LL_ADC_GetOffsetChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800244a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800244c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800244e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e003      	b.n	8002460 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <HAL_ADC_ConfigChannel+0x3de>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	0e9b      	lsrs	r3, r3, #26
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	e011      	b.n	800249e <HAL_ADC_ConfigChannel+0x402>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800248a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800248c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002492:	2320      	movs	r3, #32
 8002494:	e003      	b.n	800249e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800249e:	429a      	cmp	r2, r3
 80024a0:	d106      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2200      	movs	r2, #0
 80024a8:	2103      	movs	r1, #3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe ff40 	bl	8001330 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff f875 	bl	80015a4 <LL_ADC_IsEnabled>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f040 813f 	bne.w	8002740 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	461a      	mov	r2, r3
 80024d0:	f7fe ffc6 	bl	8001460 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a8e      	ldr	r2, [pc, #568]	; (8002714 <HAL_ADC_ConfigChannel+0x678>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	f040 8130 	bne.w	8002740 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x46c>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0e9b      	lsrs	r3, r3, #26
 80024f6:	3301      	adds	r3, #1
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	2b09      	cmp	r3, #9
 80024fe:	bf94      	ite	ls
 8002500:	2301      	movls	r3, #1
 8002502:	2300      	movhi	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e019      	b.n	800253c <HAL_ADC_ConfigChannel+0x4a0>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002518:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800251a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002520:	2320      	movs	r3, #32
 8002522:	e003      	b.n	800252c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	3301      	adds	r3, #1
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	2b09      	cmp	r3, #9
 8002534:	bf94      	ite	ls
 8002536:	2301      	movls	r3, #1
 8002538:	2300      	movhi	r3, #0
 800253a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800253c:	2b00      	cmp	r3, #0
 800253e:	d079      	beq.n	8002634 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002548:	2b00      	cmp	r3, #0
 800254a:	d107      	bne.n	800255c <HAL_ADC_ConfigChannel+0x4c0>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0e9b      	lsrs	r3, r3, #26
 8002552:	3301      	adds	r3, #1
 8002554:	069b      	lsls	r3, r3, #26
 8002556:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800255a:	e015      	b.n	8002588 <HAL_ADC_ConfigChannel+0x4ec>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800256a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800256c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800256e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e003      	b.n	8002580 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3301      	adds	r3, #1
 8002582:	069b      	lsls	r3, r3, #26
 8002584:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x50c>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0e9b      	lsrs	r3, r3, #26
 800259a:	3301      	adds	r3, #1
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	e017      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x53c>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80025c0:	2320      	movs	r3, #32
 80025c2:	e003      	b.n	80025cc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80025c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	2101      	movs	r1, #1
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	ea42 0103 	orr.w	r1, r2, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x562>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0e9b      	lsrs	r3, r3, #26
 80025ee:	3301      	adds	r3, #1
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	051b      	lsls	r3, r3, #20
 80025fc:	e018      	b.n	8002630 <HAL_ADC_ConfigChannel+0x594>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800260c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002616:	2320      	movs	r3, #32
 8002618:	e003      	b.n	8002622 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800261a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	3301      	adds	r3, #1
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002630:	430b      	orrs	r3, r1
 8002632:	e080      	b.n	8002736 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263c:	2b00      	cmp	r3, #0
 800263e:	d107      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x5b4>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0e9b      	lsrs	r3, r3, #26
 8002646:	3301      	adds	r3, #1
 8002648:	069b      	lsls	r3, r3, #26
 800264a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800264e:	e015      	b.n	800267c <HAL_ADC_ConfigChannel+0x5e0>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800265e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002668:	2320      	movs	r3, #32
 800266a:	e003      	b.n	8002674 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	3301      	adds	r3, #1
 8002676:	069b      	lsls	r3, r3, #26
 8002678:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_ADC_ConfigChannel+0x600>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0e9b      	lsrs	r3, r3, #26
 800268e:	3301      	adds	r3, #1
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	e017      	b.n	80026cc <HAL_ADC_ConfigChannel+0x630>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	61fb      	str	r3, [r7, #28]
  return result;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80026b4:	2320      	movs	r3, #32
 80026b6:	e003      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	2101      	movs	r1, #1
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	ea42 0103 	orr.w	r1, r2, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10d      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x65c>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0e9b      	lsrs	r3, r3, #26
 80026e2:	3301      	adds	r3, #1
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	3b1e      	subs	r3, #30
 80026f0:	051b      	lsls	r3, r3, #20
 80026f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026f6:	e01d      	b.n	8002734 <HAL_ADC_ConfigChannel+0x698>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	613b      	str	r3, [r7, #16]
  return result;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d103      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002710:	2320      	movs	r3, #32
 8002712:	e005      	b.n	8002720 <HAL_ADC_ConfigChannel+0x684>
 8002714:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	3301      	adds	r3, #1
 8002722:	f003 021f 	and.w	r2, r3, #31
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	3b1e      	subs	r3, #30
 800272e:	051b      	lsls	r3, r3, #20
 8002730:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002734:	430b      	orrs	r3, r1
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	6892      	ldr	r2, [r2, #8]
 800273a:	4619      	mov	r1, r3
 800273c:	f7fe fe65 	bl	800140a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b44      	ldr	r3, [pc, #272]	; (8002858 <HAL_ADC_ConfigChannel+0x7bc>)
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d07a      	beq.n	8002842 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800274c:	4843      	ldr	r0, [pc, #268]	; (800285c <HAL_ADC_ConfigChannel+0x7c0>)
 800274e:	f7fe fda7 	bl	80012a0 <LL_ADC_GetCommonPathInternalCh>
 8002752:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a41      	ldr	r2, [pc, #260]	; (8002860 <HAL_ADC_ConfigChannel+0x7c4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d12c      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002760:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d126      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a3c      	ldr	r2, [pc, #240]	; (8002864 <HAL_ADC_ConfigChannel+0x7c8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d004      	beq.n	8002780 <HAL_ADC_ConfigChannel+0x6e4>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a3b      	ldr	r2, [pc, #236]	; (8002868 <HAL_ADC_ConfigChannel+0x7cc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d15d      	bne.n	800283c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002784:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002788:	4619      	mov	r1, r3
 800278a:	4834      	ldr	r0, [pc, #208]	; (800285c <HAL_ADC_ConfigChannel+0x7c0>)
 800278c:	f7fe fd75 	bl	800127a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002790:	4b36      	ldr	r3, [pc, #216]	; (800286c <HAL_ADC_ConfigChannel+0x7d0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	4a36      	ldr	r2, [pc, #216]	; (8002870 <HAL_ADC_ConfigChannel+0x7d4>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027aa:	e002      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f9      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027b8:	e040      	b.n	800283c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a2d      	ldr	r2, [pc, #180]	; (8002874 <HAL_ADC_ConfigChannel+0x7d8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d118      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x75a>
 80027c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d112      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a23      	ldr	r2, [pc, #140]	; (8002864 <HAL_ADC_ConfigChannel+0x7c8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d004      	beq.n	80027e4 <HAL_ADC_ConfigChannel+0x748>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a22      	ldr	r2, [pc, #136]	; (8002868 <HAL_ADC_ConfigChannel+0x7cc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d12d      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ec:	4619      	mov	r1, r3
 80027ee:	481b      	ldr	r0, [pc, #108]	; (800285c <HAL_ADC_ConfigChannel+0x7c0>)
 80027f0:	f7fe fd43 	bl	800127a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027f4:	e024      	b.n	8002840 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <HAL_ADC_ConfigChannel+0x7dc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d120      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d11a      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a14      	ldr	r2, [pc, #80]	; (8002864 <HAL_ADC_ConfigChannel+0x7c8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d115      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002816:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800281a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800281e:	4619      	mov	r1, r3
 8002820:	480e      	ldr	r0, [pc, #56]	; (800285c <HAL_ADC_ConfigChannel+0x7c0>)
 8002822:	f7fe fd2a 	bl	800127a <LL_ADC_SetCommonPathInternalCh>
 8002826:	e00c      	b.n	8002842 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282c:	f043 0220 	orr.w	r2, r3, #32
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800283a:	e002      	b.n	8002842 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800283c:	bf00      	nop
 800283e:	e000      	b.n	8002842 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002840:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800284a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800284e:	4618      	mov	r0, r3
 8002850:	37d8      	adds	r7, #216	; 0xd8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	80080000 	.word	0x80080000
 800285c:	50040300 	.word	0x50040300
 8002860:	c7520000 	.word	0xc7520000
 8002864:	50040000 	.word	0x50040000
 8002868:	50040200 	.word	0x50040200
 800286c:	2000000c 	.word	0x2000000c
 8002870:	053e2d63 	.word	0x053e2d63
 8002874:	cb840000 	.word	0xcb840000
 8002878:	80000001 	.word	0x80000001

0800287c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe fe89 	bl	80015a4 <LL_ADC_IsEnabled>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d169      	bne.n	800296c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	4b36      	ldr	r3, [pc, #216]	; (8002978 <ADC_Enable+0xfc>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00d      	beq.n	80028c2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	f043 0210 	orr.w	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	f043 0201 	orr.w	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e055      	b.n	800296e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fe58 	bl	800157c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80028cc:	482b      	ldr	r0, [pc, #172]	; (800297c <ADC_Enable+0x100>)
 80028ce:	f7fe fce7 	bl	80012a0 <LL_ADC_GetCommonPathInternalCh>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d013      	beq.n	8002904 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <ADC_Enable+0x104>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	099b      	lsrs	r3, r3, #6
 80028e2:	4a28      	ldr	r2, [pc, #160]	; (8002984 <ADC_Enable+0x108>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	099b      	lsrs	r3, r3, #6
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80028f6:	e002      	b.n	80028fe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f9      	bne.n	80028f8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002904:	f7fe fc76 	bl	80011f4 <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800290a:	e028      	b.n	800295e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe fe47 	bl	80015a4 <LL_ADC_IsEnabled>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d104      	bne.n	8002926 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe fe2b 	bl	800157c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002926:	f7fe fc65 	bl	80011f4 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d914      	bls.n	800295e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b01      	cmp	r3, #1
 8002940:	d00d      	beq.n	800295e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002946:	f043 0210 	orr.w	r2, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	f043 0201 	orr.w	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e007      	b.n	800296e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b01      	cmp	r3, #1
 800296a:	d1cf      	bne.n	800290c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	8000003f 	.word	0x8000003f
 800297c:	50040300 	.word	0x50040300
 8002980:	2000000c 	.word	0x2000000c
 8002984:	053e2d63 	.word	0x053e2d63

08002988 <LL_ADC_IsEnabled>:
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <LL_ADC_IsEnabled+0x18>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <LL_ADC_IsEnabled+0x1a>
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <LL_ADC_REG_IsConversionOngoing>:
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d101      	bne.n	80029c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b09f      	sub	sp, #124	; 0x7c
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e093      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002a62:	2300      	movs	r3, #0
 8002a64:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a47      	ldr	r2, [pc, #284]	; (8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d102      	bne.n	8002a76 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a70:	4b46      	ldr	r3, [pc, #280]	; (8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	e001      	b.n	8002a7a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a76:	2300      	movs	r3, #0
 8002a78:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10b      	bne.n	8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e072      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ff87 	bl	80029ae <LL_ADC_REG_IsConversionOngoing>
 8002aa0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff ff81 	bl	80029ae <LL_ADC_REG_IsConversionOngoing>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d154      	bne.n	8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d151      	bne.n	8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ab8:	4b35      	ldr	r3, [pc, #212]	; (8002b90 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002aba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d02c      	beq.n	8002b1e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ad6:	035b      	lsls	r3, r3, #13
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	431a      	orrs	r2, r3
 8002adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ade:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ae0:	4829      	ldr	r0, [pc, #164]	; (8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ae2:	f7ff ff51 	bl	8002988 <LL_ADC_IsEnabled>
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	4828      	ldr	r0, [pc, #160]	; (8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002aea:	f7ff ff4d 	bl	8002988 <LL_ADC_IsEnabled>
 8002aee:	4603      	mov	r3, r0
 8002af0:	431c      	orrs	r4, r3
 8002af2:	4828      	ldr	r0, [pc, #160]	; (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002af4:	f7ff ff48 	bl	8002988 <LL_ADC_IsEnabled>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4323      	orrs	r3, r4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d137      	bne.n	8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b08:	f023 030f 	bic.w	r3, r3, #15
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	6811      	ldr	r1, [r2, #0]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	6892      	ldr	r2, [r2, #8]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	431a      	orrs	r2, r3
 8002b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b1c:	e028      	b.n	8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b28:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b2a:	4817      	ldr	r0, [pc, #92]	; (8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b2c:	f7ff ff2c 	bl	8002988 <LL_ADC_IsEnabled>
 8002b30:	4604      	mov	r4, r0
 8002b32:	4816      	ldr	r0, [pc, #88]	; (8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b34:	f7ff ff28 	bl	8002988 <LL_ADC_IsEnabled>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	431c      	orrs	r4, r3
 8002b3c:	4815      	ldr	r0, [pc, #84]	; (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002b3e:	f7ff ff23 	bl	8002988 <LL_ADC_IsEnabled>
 8002b42:	4603      	mov	r3, r0
 8002b44:	4323      	orrs	r3, r4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d112      	bne.n	8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b52:	f023 030f 	bic.w	r3, r3, #15
 8002b56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b58:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b5a:	e009      	b.n	8002b70 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f043 0220 	orr.w	r2, r3, #32
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002b6e:	e000      	b.n	8002b72 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b70:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b7a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	377c      	adds	r7, #124	; 0x7c
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd90      	pop	{r4, r7, pc}
 8002b86:	bf00      	nop
 8002b88:	50040000 	.word	0x50040000
 8002b8c:	50040100 	.word	0x50040100
 8002b90:	50040300 	.word	0x50040300
 8002b94:	50040200 	.word	0x50040200

08002b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <__NVIC_SetPriorityGrouping+0x44>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bca:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <__NVIC_SetPriorityGrouping+0x44>)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	60d3      	str	r3, [r2, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	0a1b      	lsrs	r3, r3, #8
 8002bea:	f003 0307 	and.w	r3, r3, #7
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	db0b      	blt.n	8002c26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	f003 021f 	and.w	r2, r3, #31
 8002c14:	4907      	ldr	r1, [pc, #28]	; (8002c34 <__NVIC_EnableIRQ+0x38>)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	e000e100 	.word	0xe000e100

08002c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	6039      	str	r1, [r7, #0]
 8002c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	db0a      	blt.n	8002c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	490c      	ldr	r1, [pc, #48]	; (8002c84 <__NVIC_SetPriority+0x4c>)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	0112      	lsls	r2, r2, #4
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c60:	e00a      	b.n	8002c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4908      	ldr	r1, [pc, #32]	; (8002c88 <__NVIC_SetPriority+0x50>)
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	3b04      	subs	r3, #4
 8002c70:	0112      	lsls	r2, r2, #4
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	440b      	add	r3, r1
 8002c76:	761a      	strb	r2, [r3, #24]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000e100 	.word	0xe000e100
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b089      	sub	sp, #36	; 0x24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f1c3 0307 	rsb	r3, r3, #7
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	bf28      	it	cs
 8002caa:	2304      	movcs	r3, #4
 8002cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	2b06      	cmp	r3, #6
 8002cb4:	d902      	bls.n	8002cbc <NVIC_EncodePriority+0x30>
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3b03      	subs	r3, #3
 8002cba:	e000      	b.n	8002cbe <NVIC_EncodePriority+0x32>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	401a      	ands	r2, r3
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	43d9      	mvns	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce4:	4313      	orrs	r3, r2
         );
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3724      	adds	r7, #36	; 0x24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d04:	d301      	bcc.n	8002d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d06:	2301      	movs	r3, #1
 8002d08:	e00f      	b.n	8002d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <SysTick_Config+0x40>)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d12:	210f      	movs	r1, #15
 8002d14:	f04f 30ff 	mov.w	r0, #4294967295
 8002d18:	f7ff ff8e 	bl	8002c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <SysTick_Config+0x40>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d22:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <SysTick_Config+0x40>)
 8002d24:	2207      	movs	r2, #7
 8002d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	e000e010 	.word	0xe000e010

08002d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff ff29 	bl	8002b98 <__NVIC_SetPriorityGrouping>
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b086      	sub	sp, #24
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	4603      	mov	r3, r0
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d60:	f7ff ff3e 	bl	8002be0 <__NVIC_GetPriorityGrouping>
 8002d64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	6978      	ldr	r0, [r7, #20]
 8002d6c:	f7ff ff8e 	bl	8002c8c <NVIC_EncodePriority>
 8002d70:	4602      	mov	r2, r0
 8002d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff5d 	bl	8002c38 <__NVIC_SetPriority>
}
 8002d7e:	bf00      	nop
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff31 	bl	8002bfc <__NVIC_EnableIRQ>
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff ffa2 	bl	8002cf4 <SysTick_Config>
 8002db0:	4603      	mov	r3, r0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dca:	e17f      	b.n	80030cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8171 	beq.w	80030c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d005      	beq.n	8002dfc <HAL_GPIO_Init+0x40>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d130      	bne.n	8002e5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	2203      	movs	r2, #3
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e32:	2201      	movs	r2, #1
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	f003 0201 	and.w	r2, r3, #1
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d118      	bne.n	8002e9c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e70:	2201      	movs	r2, #1
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	08db      	lsrs	r3, r3, #3
 8002e86:	f003 0201 	and.w	r2, r3, #1
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d017      	beq.n	8002ed8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d123      	bne.n	8002f2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	08da      	lsrs	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3208      	adds	r2, #8
 8002eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	220f      	movs	r2, #15
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	08da      	lsrs	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3208      	adds	r2, #8
 8002f26:	6939      	ldr	r1, [r7, #16]
 8002f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	2203      	movs	r2, #3
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0203 	and.w	r2, r3, #3
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80ac 	beq.w	80030c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6e:	4b5f      	ldr	r3, [pc, #380]	; (80030ec <HAL_GPIO_Init+0x330>)
 8002f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f72:	4a5e      	ldr	r2, [pc, #376]	; (80030ec <HAL_GPIO_Init+0x330>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6613      	str	r3, [r2, #96]	; 0x60
 8002f7a:	4b5c      	ldr	r3, [pc, #368]	; (80030ec <HAL_GPIO_Init+0x330>)
 8002f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f86:	4a5a      	ldr	r2, [pc, #360]	; (80030f0 <HAL_GPIO_Init+0x334>)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	220f      	movs	r2, #15
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fb0:	d025      	beq.n	8002ffe <HAL_GPIO_Init+0x242>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a4f      	ldr	r2, [pc, #316]	; (80030f4 <HAL_GPIO_Init+0x338>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01f      	beq.n	8002ffa <HAL_GPIO_Init+0x23e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a4e      	ldr	r2, [pc, #312]	; (80030f8 <HAL_GPIO_Init+0x33c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d019      	beq.n	8002ff6 <HAL_GPIO_Init+0x23a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a4d      	ldr	r2, [pc, #308]	; (80030fc <HAL_GPIO_Init+0x340>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <HAL_GPIO_Init+0x236>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a4c      	ldr	r2, [pc, #304]	; (8003100 <HAL_GPIO_Init+0x344>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00d      	beq.n	8002fee <HAL_GPIO_Init+0x232>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a4b      	ldr	r2, [pc, #300]	; (8003104 <HAL_GPIO_Init+0x348>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d007      	beq.n	8002fea <HAL_GPIO_Init+0x22e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a4a      	ldr	r2, [pc, #296]	; (8003108 <HAL_GPIO_Init+0x34c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <HAL_GPIO_Init+0x22a>
 8002fe2:	2306      	movs	r3, #6
 8002fe4:	e00c      	b.n	8003000 <HAL_GPIO_Init+0x244>
 8002fe6:	2307      	movs	r3, #7
 8002fe8:	e00a      	b.n	8003000 <HAL_GPIO_Init+0x244>
 8002fea:	2305      	movs	r3, #5
 8002fec:	e008      	b.n	8003000 <HAL_GPIO_Init+0x244>
 8002fee:	2304      	movs	r3, #4
 8002ff0:	e006      	b.n	8003000 <HAL_GPIO_Init+0x244>
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e004      	b.n	8003000 <HAL_GPIO_Init+0x244>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e002      	b.n	8003000 <HAL_GPIO_Init+0x244>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <HAL_GPIO_Init+0x244>
 8002ffe:	2300      	movs	r3, #0
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	f002 0203 	and.w	r2, r2, #3
 8003006:	0092      	lsls	r2, r2, #2
 8003008:	4093      	lsls	r3, r2
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003010:	4937      	ldr	r1, [pc, #220]	; (80030f0 <HAL_GPIO_Init+0x334>)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	089b      	lsrs	r3, r3, #2
 8003016:	3302      	adds	r3, #2
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800301e:	4b3b      	ldr	r3, [pc, #236]	; (800310c <HAL_GPIO_Init+0x350>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	43db      	mvns	r3, r3
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4013      	ands	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003042:	4a32      	ldr	r2, [pc, #200]	; (800310c <HAL_GPIO_Init+0x350>)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003048:	4b30      	ldr	r3, [pc, #192]	; (800310c <HAL_GPIO_Init+0x350>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	43db      	mvns	r3, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800306c:	4a27      	ldr	r2, [pc, #156]	; (800310c <HAL_GPIO_Init+0x350>)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003072:	4b26      	ldr	r3, [pc, #152]	; (800310c <HAL_GPIO_Init+0x350>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	43db      	mvns	r3, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003096:	4a1d      	ldr	r2, [pc, #116]	; (800310c <HAL_GPIO_Init+0x350>)
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800309c:	4b1b      	ldr	r3, [pc, #108]	; (800310c <HAL_GPIO_Init+0x350>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030c0:	4a12      	ldr	r2, [pc, #72]	; (800310c <HAL_GPIO_Init+0x350>)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	3301      	adds	r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	fa22 f303 	lsr.w	r3, r2, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f47f ae78 	bne.w	8002dcc <HAL_GPIO_Init+0x10>
  }
}
 80030dc:	bf00      	nop
 80030de:	bf00      	nop
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40010000 	.word	0x40010000
 80030f4:	48000400 	.word	0x48000400
 80030f8:	48000800 	.word	0x48000800
 80030fc:	48000c00 	.word	0x48000c00
 8003100:	48001000 	.word	0x48001000
 8003104:	48001400 	.word	0x48001400
 8003108:	48001800 	.word	0x48001800
 800310c:	40010400 	.word	0x40010400

08003110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	807b      	strh	r3, [r7, #2]
 800311c:	4613      	mov	r3, r2
 800311e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003120:	787b      	ldrb	r3, [r7, #1]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800312c:	e002      	b.n	8003134 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800312e:	887a      	ldrh	r2, [r7, #2]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <HAL_PWREx_GetVoltageRange+0x18>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40007000 	.word	0x40007000

0800315c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316a:	d130      	bne.n	80031ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800316c:	4b23      	ldr	r3, [pc, #140]	; (80031fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003178:	d038      	beq.n	80031ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800317a:	4b20      	ldr	r3, [pc, #128]	; (80031fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003182:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003184:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003188:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800318a:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2232      	movs	r2, #50	; 0x32
 8003190:	fb02 f303 	mul.w	r3, r2, r3
 8003194:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	0c9b      	lsrs	r3, r3, #18
 800319c:	3301      	adds	r3, #1
 800319e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031a0:	e002      	b.n	80031a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3b01      	subs	r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031a8:	4b14      	ldr	r3, [pc, #80]	; (80031fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b4:	d102      	bne.n	80031bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1f2      	bne.n	80031a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031bc:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c8:	d110      	bne.n	80031ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e00f      	b.n	80031ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ce:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031da:	d007      	beq.n	80031ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031dc:	4b07      	ldr	r3, [pc, #28]	; (80031fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031e4:	4a05      	ldr	r2, [pc, #20]	; (80031fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40007000 	.word	0x40007000
 8003200:	2000000c 	.word	0x2000000c
 8003204:	431bde83 	.word	0x431bde83

08003208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e3ca      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800321a:	4b97      	ldr	r3, [pc, #604]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003224:	4b94      	ldr	r3, [pc, #592]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 80e4 	beq.w	8003404 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <HAL_RCC_OscConfig+0x4a>
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	2b0c      	cmp	r3, #12
 8003246:	f040 808b 	bne.w	8003360 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b01      	cmp	r3, #1
 800324e:	f040 8087 	bne.w	8003360 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003252:	4b89      	ldr	r3, [pc, #548]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_RCC_OscConfig+0x62>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e3a2      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1a      	ldr	r2, [r3, #32]
 800326e:	4b82      	ldr	r3, [pc, #520]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d004      	beq.n	8003284 <HAL_RCC_OscConfig+0x7c>
 800327a:	4b7f      	ldr	r3, [pc, #508]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003282:	e005      	b.n	8003290 <HAL_RCC_OscConfig+0x88>
 8003284:	4b7c      	ldr	r3, [pc, #496]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 8003286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003290:	4293      	cmp	r3, r2
 8003292:	d223      	bcs.n	80032dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fd55 	bl	8003d48 <RCC_SetFlashLatencyFromMSIRange>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e383      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032a8:	4b73      	ldr	r3, [pc, #460]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a72      	ldr	r2, [pc, #456]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80032ae:	f043 0308 	orr.w	r3, r3, #8
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	4b70      	ldr	r3, [pc, #448]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	496d      	ldr	r1, [pc, #436]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032c6:	4b6c      	ldr	r3, [pc, #432]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	4968      	ldr	r1, [pc, #416]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]
 80032da:	e025      	b.n	8003328 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032dc:	4b66      	ldr	r3, [pc, #408]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a65      	ldr	r2, [pc, #404]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80032e2:	f043 0308 	orr.w	r3, r3, #8
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	4b63      	ldr	r3, [pc, #396]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	4960      	ldr	r1, [pc, #384]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032fa:	4b5f      	ldr	r3, [pc, #380]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	495b      	ldr	r1, [pc, #364]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 800330a:	4313      	orrs	r3, r2
 800330c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d109      	bne.n	8003328 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fd15 	bl	8003d48 <RCC_SetFlashLatencyFromMSIRange>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e343      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003328:	f000 fc4a 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b52      	ldr	r3, [pc, #328]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	091b      	lsrs	r3, r3, #4
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	4950      	ldr	r1, [pc, #320]	; (800347c <HAL_RCC_OscConfig+0x274>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
 8003344:	4a4e      	ldr	r2, [pc, #312]	; (8003480 <HAL_RCC_OscConfig+0x278>)
 8003346:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003348:	4b4e      	ldr	r3, [pc, #312]	; (8003484 <HAL_RCC_OscConfig+0x27c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd ff01 	bl	8001154 <HAL_InitTick>
 8003352:	4603      	mov	r3, r0
 8003354:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d052      	beq.n	8003402 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	e327      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d032      	beq.n	80033ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003368:	4b43      	ldr	r3, [pc, #268]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a42      	ldr	r2, [pc, #264]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003374:	f7fd ff3e 	bl	80011f4 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800337c:	f7fd ff3a 	bl	80011f4 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e310      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800338e:	4b3a      	ldr	r3, [pc, #232]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800339a:	4b37      	ldr	r3, [pc, #220]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a36      	ldr	r2, [pc, #216]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80033a0:	f043 0308 	orr.w	r3, r3, #8
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	4b34      	ldr	r3, [pc, #208]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4931      	ldr	r1, [pc, #196]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033b8:	4b2f      	ldr	r3, [pc, #188]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	492c      	ldr	r1, [pc, #176]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
 80033cc:	e01a      	b.n	8003404 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033ce:	4b2a      	ldr	r3, [pc, #168]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a29      	ldr	r2, [pc, #164]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80033d4:	f023 0301 	bic.w	r3, r3, #1
 80033d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033da:	f7fd ff0b 	bl	80011f4 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033e2:	f7fd ff07 	bl	80011f4 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e2dd      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033f4:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f0      	bne.n	80033e2 <HAL_RCC_OscConfig+0x1da>
 8003400:	e000      	b.n	8003404 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003402:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d074      	beq.n	80034fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b08      	cmp	r3, #8
 8003414:	d005      	beq.n	8003422 <HAL_RCC_OscConfig+0x21a>
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2b0c      	cmp	r3, #12
 800341a:	d10e      	bne.n	800343a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2b03      	cmp	r3, #3
 8003420:	d10b      	bne.n	800343a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003422:	4b15      	ldr	r3, [pc, #84]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d064      	beq.n	80034f8 <HAL_RCC_OscConfig+0x2f0>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d160      	bne.n	80034f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e2ba      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003442:	d106      	bne.n	8003452 <HAL_RCC_OscConfig+0x24a>
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a0b      	ldr	r2, [pc, #44]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 800344a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	e026      	b.n	80034a0 <HAL_RCC_OscConfig+0x298>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800345a:	d115      	bne.n	8003488 <HAL_RCC_OscConfig+0x280>
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a05      	ldr	r2, [pc, #20]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 8003462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a02      	ldr	r2, [pc, #8]	; (8003478 <HAL_RCC_OscConfig+0x270>)
 800346e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	e014      	b.n	80034a0 <HAL_RCC_OscConfig+0x298>
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
 800347c:	08006478 	.word	0x08006478
 8003480:	2000000c 	.word	0x2000000c
 8003484:	20000010 	.word	0x20000010
 8003488:	4ba0      	ldr	r3, [pc, #640]	; (800370c <HAL_RCC_OscConfig+0x504>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a9f      	ldr	r2, [pc, #636]	; (800370c <HAL_RCC_OscConfig+0x504>)
 800348e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b9d      	ldr	r3, [pc, #628]	; (800370c <HAL_RCC_OscConfig+0x504>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a9c      	ldr	r2, [pc, #624]	; (800370c <HAL_RCC_OscConfig+0x504>)
 800349a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800349e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d013      	beq.n	80034d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fd fea4 	bl	80011f4 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b0:	f7fd fea0 	bl	80011f4 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b64      	cmp	r3, #100	; 0x64
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e276      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034c2:	4b92      	ldr	r3, [pc, #584]	; (800370c <HAL_RCC_OscConfig+0x504>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x2a8>
 80034ce:	e014      	b.n	80034fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fd fe90 	bl	80011f4 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d8:	f7fd fe8c 	bl	80011f4 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b64      	cmp	r3, #100	; 0x64
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e262      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ea:	4b88      	ldr	r3, [pc, #544]	; (800370c <HAL_RCC_OscConfig+0x504>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x2d0>
 80034f6:	e000      	b.n	80034fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d060      	beq.n	80035c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b04      	cmp	r3, #4
 800350a:	d005      	beq.n	8003518 <HAL_RCC_OscConfig+0x310>
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b0c      	cmp	r3, #12
 8003510:	d119      	bne.n	8003546 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d116      	bne.n	8003546 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003518:	4b7c      	ldr	r3, [pc, #496]	; (800370c <HAL_RCC_OscConfig+0x504>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_OscConfig+0x328>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e23f      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003530:	4b76      	ldr	r3, [pc, #472]	; (800370c <HAL_RCC_OscConfig+0x504>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	061b      	lsls	r3, r3, #24
 800353e:	4973      	ldr	r1, [pc, #460]	; (800370c <HAL_RCC_OscConfig+0x504>)
 8003540:	4313      	orrs	r3, r2
 8003542:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003544:	e040      	b.n	80035c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d023      	beq.n	8003596 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800354e:	4b6f      	ldr	r3, [pc, #444]	; (800370c <HAL_RCC_OscConfig+0x504>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a6e      	ldr	r2, [pc, #440]	; (800370c <HAL_RCC_OscConfig+0x504>)
 8003554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fd fe4b 	bl	80011f4 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003562:	f7fd fe47 	bl	80011f4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e21d      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003574:	4b65      	ldr	r3, [pc, #404]	; (800370c <HAL_RCC_OscConfig+0x504>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003580:	4b62      	ldr	r3, [pc, #392]	; (800370c <HAL_RCC_OscConfig+0x504>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	495f      	ldr	r1, [pc, #380]	; (800370c <HAL_RCC_OscConfig+0x504>)
 8003590:	4313      	orrs	r3, r2
 8003592:	604b      	str	r3, [r1, #4]
 8003594:	e018      	b.n	80035c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003596:	4b5d      	ldr	r3, [pc, #372]	; (800370c <HAL_RCC_OscConfig+0x504>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a5c      	ldr	r2, [pc, #368]	; (800370c <HAL_RCC_OscConfig+0x504>)
 800359c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7fd fe27 	bl	80011f4 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035aa:	f7fd fe23 	bl	80011f4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e1f9      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035bc:	4b53      	ldr	r3, [pc, #332]	; (800370c <HAL_RCC_OscConfig+0x504>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f0      	bne.n	80035aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d03c      	beq.n	800364e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01c      	beq.n	8003616 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035dc:	4b4b      	ldr	r3, [pc, #300]	; (800370c <HAL_RCC_OscConfig+0x504>)
 80035de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035e2:	4a4a      	ldr	r2, [pc, #296]	; (800370c <HAL_RCC_OscConfig+0x504>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7fd fe02 	bl	80011f4 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f4:	f7fd fdfe 	bl	80011f4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e1d4      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003606:	4b41      	ldr	r3, [pc, #260]	; (800370c <HAL_RCC_OscConfig+0x504>)
 8003608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0ef      	beq.n	80035f4 <HAL_RCC_OscConfig+0x3ec>
 8003614:	e01b      	b.n	800364e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003616:	4b3d      	ldr	r3, [pc, #244]	; (800370c <HAL_RCC_OscConfig+0x504>)
 8003618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361c:	4a3b      	ldr	r2, [pc, #236]	; (800370c <HAL_RCC_OscConfig+0x504>)
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003626:	f7fd fde5 	bl	80011f4 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800362e:	f7fd fde1 	bl	80011f4 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e1b7      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003640:	4b32      	ldr	r3, [pc, #200]	; (800370c <HAL_RCC_OscConfig+0x504>)
 8003642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1ef      	bne.n	800362e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80a6 	beq.w	80037a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800365c:	2300      	movs	r3, #0
 800365e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003660:	4b2a      	ldr	r3, [pc, #168]	; (800370c <HAL_RCC_OscConfig+0x504>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10d      	bne.n	8003688 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366c:	4b27      	ldr	r3, [pc, #156]	; (800370c <HAL_RCC_OscConfig+0x504>)
 800366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003670:	4a26      	ldr	r2, [pc, #152]	; (800370c <HAL_RCC_OscConfig+0x504>)
 8003672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003676:	6593      	str	r3, [r2, #88]	; 0x58
 8003678:	4b24      	ldr	r3, [pc, #144]	; (800370c <HAL_RCC_OscConfig+0x504>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003684:	2301      	movs	r3, #1
 8003686:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003688:	4b21      	ldr	r3, [pc, #132]	; (8003710 <HAL_RCC_OscConfig+0x508>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d118      	bne.n	80036c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003694:	4b1e      	ldr	r3, [pc, #120]	; (8003710 <HAL_RCC_OscConfig+0x508>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <HAL_RCC_OscConfig+0x508>)
 800369a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a0:	f7fd fda8 	bl	80011f4 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a8:	f7fd fda4 	bl	80011f4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e17a      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ba:	4b15      	ldr	r3, [pc, #84]	; (8003710 <HAL_RCC_OscConfig+0x508>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d108      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4d8>
 80036ce:	4b0f      	ldr	r3, [pc, #60]	; (800370c <HAL_RCC_OscConfig+0x504>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	4a0d      	ldr	r2, [pc, #52]	; (800370c <HAL_RCC_OscConfig+0x504>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036de:	e029      	b.n	8003734 <HAL_RCC_OscConfig+0x52c>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b05      	cmp	r3, #5
 80036e6:	d115      	bne.n	8003714 <HAL_RCC_OscConfig+0x50c>
 80036e8:	4b08      	ldr	r3, [pc, #32]	; (800370c <HAL_RCC_OscConfig+0x504>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	4a07      	ldr	r2, [pc, #28]	; (800370c <HAL_RCC_OscConfig+0x504>)
 80036f0:	f043 0304 	orr.w	r3, r3, #4
 80036f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <HAL_RCC_OscConfig+0x504>)
 80036fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fe:	4a03      	ldr	r2, [pc, #12]	; (800370c <HAL_RCC_OscConfig+0x504>)
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003708:	e014      	b.n	8003734 <HAL_RCC_OscConfig+0x52c>
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	40007000 	.word	0x40007000
 8003714:	4b9c      	ldr	r3, [pc, #624]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371a:	4a9b      	ldr	r2, [pc, #620]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003724:	4b98      	ldr	r3, [pc, #608]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	4a97      	ldr	r2, [pc, #604]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d016      	beq.n	800376a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fd fd5a 	bl	80011f4 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003742:	e00a      	b.n	800375a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003744:	f7fd fd56 	bl	80011f4 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e12a      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375a:	4b8b      	ldr	r3, [pc, #556]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0ed      	beq.n	8003744 <HAL_RCC_OscConfig+0x53c>
 8003768:	e015      	b.n	8003796 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376a:	f7fd fd43 	bl	80011f4 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003770:	e00a      	b.n	8003788 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003772:	f7fd fd3f 	bl	80011f4 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003780:	4293      	cmp	r3, r2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e113      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003788:	4b7f      	ldr	r3, [pc, #508]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1ed      	bne.n	8003772 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003796:	7ffb      	ldrb	r3, [r7, #31]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d105      	bne.n	80037a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800379c:	4b7a      	ldr	r3, [pc, #488]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	4a79      	ldr	r2, [pc, #484]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 80037a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80fe 	beq.w	80039ae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	f040 80d0 	bne.w	800395c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037bc:	4b72      	ldr	r3, [pc, #456]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f003 0203 	and.w	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d130      	bne.n	8003832 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	3b01      	subs	r3, #1
 80037dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d127      	bne.n	8003832 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d11f      	bne.n	8003832 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037fc:	2a07      	cmp	r2, #7
 80037fe:	bf14      	ite	ne
 8003800:	2201      	movne	r2, #1
 8003802:	2200      	moveq	r2, #0
 8003804:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003806:	4293      	cmp	r3, r2
 8003808:	d113      	bne.n	8003832 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003814:	085b      	lsrs	r3, r3, #1
 8003816:	3b01      	subs	r3, #1
 8003818:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d109      	bne.n	8003832 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	3b01      	subs	r3, #1
 800382c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d06e      	beq.n	8003910 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b0c      	cmp	r3, #12
 8003836:	d069      	beq.n	800390c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003838:	4b53      	ldr	r3, [pc, #332]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d105      	bne.n	8003850 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003844:	4b50      	ldr	r3, [pc, #320]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0ad      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003854:	4b4c      	ldr	r3, [pc, #304]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a4b      	ldr	r2, [pc, #300]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 800385a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800385e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003860:	f7fd fcc8 	bl	80011f4 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003868:	f7fd fcc4 	bl	80011f4 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e09a      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800387a:	4b43      	ldr	r3, [pc, #268]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003886:	4b40      	ldr	r3, [pc, #256]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	4b40      	ldr	r3, [pc, #256]	; (800398c <HAL_RCC_OscConfig+0x784>)
 800388c:	4013      	ands	r3, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003896:	3a01      	subs	r2, #1
 8003898:	0112      	lsls	r2, r2, #4
 800389a:	4311      	orrs	r1, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038a0:	0212      	lsls	r2, r2, #8
 80038a2:	4311      	orrs	r1, r2
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038a8:	0852      	lsrs	r2, r2, #1
 80038aa:	3a01      	subs	r2, #1
 80038ac:	0552      	lsls	r2, r2, #21
 80038ae:	4311      	orrs	r1, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038b4:	0852      	lsrs	r2, r2, #1
 80038b6:	3a01      	subs	r2, #1
 80038b8:	0652      	lsls	r2, r2, #25
 80038ba:	4311      	orrs	r1, r2
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038c0:	0912      	lsrs	r2, r2, #4
 80038c2:	0452      	lsls	r2, r2, #17
 80038c4:	430a      	orrs	r2, r1
 80038c6:	4930      	ldr	r1, [pc, #192]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038cc:	4b2e      	ldr	r3, [pc, #184]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a2d      	ldr	r2, [pc, #180]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 80038d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038d8:	4b2b      	ldr	r3, [pc, #172]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a2a      	ldr	r2, [pc, #168]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 80038de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038e4:	f7fd fc86 	bl	80011f4 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fd fc82 	bl	80011f4 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e058      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038fe:	4b22      	ldr	r3, [pc, #136]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800390a:	e050      	b.n	80039ae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e04f      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003910:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d148      	bne.n	80039ae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800391c:	4b1a      	ldr	r3, [pc, #104]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a19      	ldr	r2, [pc, #100]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 8003922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003926:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003928:	4b17      	ldr	r3, [pc, #92]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4a16      	ldr	r2, [pc, #88]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 800392e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003932:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003934:	f7fd fc5e 	bl	80011f4 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393c:	f7fd fc5a 	bl	80011f4 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e030      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800394e:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0f0      	beq.n	800393c <HAL_RCC_OscConfig+0x734>
 800395a:	e028      	b.n	80039ae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b0c      	cmp	r3, #12
 8003960:	d023      	beq.n	80039aa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003962:	4b09      	ldr	r3, [pc, #36]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a08      	ldr	r2, [pc, #32]	; (8003988 <HAL_RCC_OscConfig+0x780>)
 8003968:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800396c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396e:	f7fd fc41 	bl	80011f4 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003974:	e00c      	b.n	8003990 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003976:	f7fd fc3d 	bl	80011f4 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d905      	bls.n	8003990 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e013      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
 8003988:	40021000 	.word	0x40021000
 800398c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_RCC_OscConfig+0x7b0>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1ec      	bne.n	8003976 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_RCC_OscConfig+0x7b0>)
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	4905      	ldr	r1, [pc, #20]	; (80039b8 <HAL_RCC_OscConfig+0x7b0>)
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <HAL_RCC_OscConfig+0x7b4>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	60cb      	str	r3, [r1, #12]
 80039a8:	e001      	b.n	80039ae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3720      	adds	r7, #32
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40021000 	.word	0x40021000
 80039bc:	feeefffc 	.word	0xfeeefffc

080039c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0e7      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039d4:	4b75      	ldr	r3, [pc, #468]	; (8003bac <HAL_RCC_ClockConfig+0x1ec>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d910      	bls.n	8003a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b72      	ldr	r3, [pc, #456]	; (8003bac <HAL_RCC_ClockConfig+0x1ec>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 0207 	bic.w	r2, r3, #7
 80039ea:	4970      	ldr	r1, [pc, #448]	; (8003bac <HAL_RCC_ClockConfig+0x1ec>)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b6e      	ldr	r3, [pc, #440]	; (8003bac <HAL_RCC_ClockConfig+0x1ec>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0cf      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d010      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d908      	bls.n	8003a32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a20:	4b63      	ldr	r3, [pc, #396]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4960      	ldr	r1, [pc, #384]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d04c      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a46:	4b5a      	ldr	r3, [pc, #360]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d121      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e0a6      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a5e:	4b54      	ldr	r3, [pc, #336]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d115      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e09a      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a76:	4b4e      	ldr	r3, [pc, #312]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e08e      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a86:	4b4a      	ldr	r3, [pc, #296]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e086      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a96:	4b46      	ldr	r3, [pc, #280]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4943      	ldr	r1, [pc, #268]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa8:	f7fd fba4 	bl	80011f4 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab0:	f7fd fba0 	bl	80011f4 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e06e      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	4b3a      	ldr	r3, [pc, #232]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 020c 	and.w	r2, r3, #12
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d1eb      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d010      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d208      	bcs.n	8003b06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af4:	4b2e      	ldr	r3, [pc, #184]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	492b      	ldr	r1, [pc, #172]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b06:	4b29      	ldr	r3, [pc, #164]	; (8003bac <HAL_RCC_ClockConfig+0x1ec>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d210      	bcs.n	8003b36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b14:	4b25      	ldr	r3, [pc, #148]	; (8003bac <HAL_RCC_ClockConfig+0x1ec>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f023 0207 	bic.w	r2, r3, #7
 8003b1c:	4923      	ldr	r1, [pc, #140]	; (8003bac <HAL_RCC_ClockConfig+0x1ec>)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b24:	4b21      	ldr	r3, [pc, #132]	; (8003bac <HAL_RCC_ClockConfig+0x1ec>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d001      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e036      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b42:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	4918      	ldr	r1, [pc, #96]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d009      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b60:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4910      	ldr	r1, [pc, #64]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b74:	f000 f824 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	490b      	ldr	r1, [pc, #44]	; (8003bb4 <HAL_RCC_ClockConfig+0x1f4>)
 8003b86:	5ccb      	ldrb	r3, [r1, r3]
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b90:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8003b92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b94:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_RCC_ClockConfig+0x1fc>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fd fadb 	bl	8001154 <HAL_InitTick>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40022000 	.word	0x40022000
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	08006478 	.word	0x08006478
 8003bb8:	2000000c 	.word	0x2000000c
 8003bbc:	20000010 	.word	0x20000010

08003bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b089      	sub	sp, #36	; 0x24
 8003bc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bce:	4b3e      	ldr	r3, [pc, #248]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd8:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	d121      	bne.n	8003c32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d11e      	bne.n	8003c32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bf4:	4b34      	ldr	r3, [pc, #208]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d107      	bne.n	8003c10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c00:	4b31      	ldr	r3, [pc, #196]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	e005      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c10:	4b2d      	ldr	r3, [pc, #180]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c1c:	4a2b      	ldr	r2, [pc, #172]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10d      	bne.n	8003c48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d102      	bne.n	8003c3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c38:	4b25      	ldr	r3, [pc, #148]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c3a:	61bb      	str	r3, [r7, #24]
 8003c3c:	e004      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d101      	bne.n	8003c48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c44:	4b23      	ldr	r3, [pc, #140]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	2b0c      	cmp	r3, #12
 8003c4c:	d134      	bne.n	8003cb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c4e:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d003      	beq.n	8003c66 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d003      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0xac>
 8003c64:	e005      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c66:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c68:	617b      	str	r3, [r7, #20]
      break;
 8003c6a:	e005      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c6c:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c6e:	617b      	str	r3, [r7, #20]
      break;
 8003c70:	e002      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	617b      	str	r3, [r7, #20]
      break;
 8003c76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	091b      	lsrs	r3, r3, #4
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	3301      	adds	r3, #1
 8003c84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	fb03 f202 	mul.w	r2, r3, r2
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	0e5b      	lsrs	r3, r3, #25
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	3301      	adds	r3, #1
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003cb8:	69bb      	ldr	r3, [r7, #24]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3724      	adds	r7, #36	; 0x24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	08006490 	.word	0x08006490
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	007a1200 	.word	0x007a1200

08003cd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <HAL_RCC_GetHCLKFreq+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	2000000c 	.word	0x2000000c

08003cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cf4:	f7ff fff0 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4904      	ldr	r1, [pc, #16]	; (8003d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	08006488 	.word	0x08006488

08003d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d20:	f7ff ffda 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	0adb      	lsrs	r3, r3, #11
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4904      	ldr	r1, [pc, #16]	; (8003d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000
 8003d44:	08006488 	.word	0x08006488

08003d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d50:	2300      	movs	r3, #0
 8003d52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d54:	4b2a      	ldr	r3, [pc, #168]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d60:	f7ff f9ee 	bl	8003140 <HAL_PWREx_GetVoltageRange>
 8003d64:	6178      	str	r0, [r7, #20]
 8003d66:	e014      	b.n	8003d92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	4a24      	ldr	r2, [pc, #144]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d72:	6593      	str	r3, [r2, #88]	; 0x58
 8003d74:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d80:	f7ff f9de 	bl	8003140 <HAL_PWREx_GetVoltageRange>
 8003d84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d86:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d98:	d10b      	bne.n	8003db2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b80      	cmp	r3, #128	; 0x80
 8003d9e:	d919      	bls.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2ba0      	cmp	r3, #160	; 0xa0
 8003da4:	d902      	bls.n	8003dac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003da6:	2302      	movs	r3, #2
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	e013      	b.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dac:	2301      	movs	r3, #1
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	e010      	b.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b80      	cmp	r3, #128	; 0x80
 8003db6:	d902      	bls.n	8003dbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003db8:	2303      	movs	r3, #3
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	e00a      	b.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b80      	cmp	r3, #128	; 0x80
 8003dc2:	d102      	bne.n	8003dca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	e004      	b.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b70      	cmp	r3, #112	; 0x70
 8003dce:	d101      	bne.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 0207 	bic.w	r2, r3, #7
 8003ddc:	4909      	ldr	r1, [pc, #36]	; (8003e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003de4:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d001      	beq.n	8003df6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40022000 	.word	0x40022000

08003e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e10:	2300      	movs	r3, #0
 8003e12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e14:	2300      	movs	r3, #0
 8003e16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d041      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e2c:	d02a      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e32:	d824      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e38:	d008      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e3e:	d81e      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e48:	d010      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e4a:	e018      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e4c:	4b86      	ldr	r3, [pc, #536]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4a85      	ldr	r2, [pc, #532]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e58:	e015      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	2100      	movs	r1, #0
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fabb 	bl	80043dc <RCCEx_PLLSAI1_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e6a:	e00c      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3320      	adds	r3, #32
 8003e70:	2100      	movs	r1, #0
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fba6 	bl	80045c4 <RCCEx_PLLSAI2_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e7c:	e003      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	74fb      	strb	r3, [r7, #19]
      break;
 8003e82:	e000      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e86:	7cfb      	ldrb	r3, [r7, #19]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10b      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e8c:	4b76      	ldr	r3, [pc, #472]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e9a:	4973      	ldr	r1, [pc, #460]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ea2:	e001      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d041      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ebc:	d02a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ebe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ec2:	d824      	bhi.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ec8:	d008      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003eca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ece:	d81e      	bhi.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ed8:	d010      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003eda:	e018      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003edc:	4b62      	ldr	r3, [pc, #392]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4a61      	ldr	r2, [pc, #388]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ee8:	e015      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3304      	adds	r3, #4
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fa73 	bl	80043dc <RCCEx_PLLSAI1_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003efa:	e00c      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3320      	adds	r3, #32
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fb5e 	bl	80045c4 <RCCEx_PLLSAI2_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f0c:	e003      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	74fb      	strb	r3, [r7, #19]
      break;
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f16:	7cfb      	ldrb	r3, [r7, #19]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10b      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f1c:	4b52      	ldr	r3, [pc, #328]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f2a:	494f      	ldr	r1, [pc, #316]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f32:	e001      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80a0 	beq.w	8004086 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f46:	2300      	movs	r3, #0
 8003f48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f4a:	4b47      	ldr	r3, [pc, #284]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00d      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f60:	4b41      	ldr	r3, [pc, #260]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f64:	4a40      	ldr	r2, [pc, #256]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f6c:	4b3e      	ldr	r3, [pc, #248]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f7c:	4b3b      	ldr	r3, [pc, #236]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a3a      	ldr	r2, [pc, #232]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f88:	f7fd f934 	bl	80011f4 <HAL_GetTick>
 8003f8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f8e:	e009      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f90:	f7fd f930 	bl	80011f4 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d902      	bls.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	74fb      	strb	r3, [r7, #19]
        break;
 8003fa2:	e005      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fa4:	4b31      	ldr	r3, [pc, #196]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0ef      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003fb0:	7cfb      	ldrb	r3, [r7, #19]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d15c      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fb6:	4b2c      	ldr	r3, [pc, #176]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01f      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d019      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fd4:	4b24      	ldr	r3, [pc, #144]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fe0:	4b21      	ldr	r3, [pc, #132]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	4a20      	ldr	r2, [pc, #128]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ff0:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004000:	4a19      	ldr	r2, [pc, #100]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d016      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004012:	f7fd f8ef 	bl	80011f4 <HAL_GetTick>
 8004016:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004018:	e00b      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401a:	f7fd f8eb 	bl	80011f4 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	f241 3288 	movw	r2, #5000	; 0x1388
 8004028:	4293      	cmp	r3, r2
 800402a:	d902      	bls.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	74fb      	strb	r3, [r7, #19]
            break;
 8004030:	e006      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004032:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0ec      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10c      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004046:	4b08      	ldr	r3, [pc, #32]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004056:	4904      	ldr	r1, [pc, #16]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800405e:	e009      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	74bb      	strb	r3, [r7, #18]
 8004064:	e006      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
 800406c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004070:	7cfb      	ldrb	r3, [r7, #19]
 8004072:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004074:	7c7b      	ldrb	r3, [r7, #17]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d105      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800407a:	4b9e      	ldr	r3, [pc, #632]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	4a9d      	ldr	r2, [pc, #628]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004084:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004092:	4b98      	ldr	r3, [pc, #608]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004098:	f023 0203 	bic.w	r2, r3, #3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	4994      	ldr	r1, [pc, #592]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040b4:	4b8f      	ldr	r3, [pc, #572]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ba:	f023 020c 	bic.w	r2, r3, #12
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c2:	498c      	ldr	r1, [pc, #560]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040d6:	4b87      	ldr	r3, [pc, #540]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	4983      	ldr	r1, [pc, #524]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040f8:	4b7e      	ldr	r3, [pc, #504]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004106:	497b      	ldr	r1, [pc, #492]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800411a:	4b76      	ldr	r3, [pc, #472]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004128:	4972      	ldr	r1, [pc, #456]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0320 	and.w	r3, r3, #32
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800413c:	4b6d      	ldr	r3, [pc, #436]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414a:	496a      	ldr	r1, [pc, #424]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800415e:	4b65      	ldr	r3, [pc, #404]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004164:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416c:	4961      	ldr	r1, [pc, #388]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004180:	4b5c      	ldr	r3, [pc, #368]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004186:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418e:	4959      	ldr	r1, [pc, #356]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041a2:	4b54      	ldr	r3, [pc, #336]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b0:	4950      	ldr	r1, [pc, #320]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041c4:	4b4b      	ldr	r3, [pc, #300]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	4948      	ldr	r1, [pc, #288]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041e6:	4b43      	ldr	r3, [pc, #268]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	493f      	ldr	r1, [pc, #252]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d028      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004208:	4b3a      	ldr	r3, [pc, #232]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004216:	4937      	ldr	r1, [pc, #220]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004226:	d106      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004228:	4b32      	ldr	r3, [pc, #200]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4a31      	ldr	r2, [pc, #196]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004232:	60d3      	str	r3, [r2, #12]
 8004234:	e011      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800423a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800423e:	d10c      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3304      	adds	r3, #4
 8004244:	2101      	movs	r1, #1
 8004246:	4618      	mov	r0, r3
 8004248:	f000 f8c8 	bl	80043dc <RCCEx_PLLSAI1_Config>
 800424c:	4603      	mov	r3, r0
 800424e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004250:	7cfb      	ldrb	r3, [r7, #19]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004256:	7cfb      	ldrb	r3, [r7, #19]
 8004258:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d028      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004266:	4b23      	ldr	r3, [pc, #140]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	491f      	ldr	r1, [pc, #124]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004284:	d106      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004286:	4b1b      	ldr	r3, [pc, #108]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	4a1a      	ldr	r2, [pc, #104]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004290:	60d3      	str	r3, [r2, #12]
 8004292:	e011      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800429c:	d10c      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	2101      	movs	r1, #1
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f899 	bl	80043dc <RCCEx_PLLSAI1_Config>
 80042aa:	4603      	mov	r3, r0
 80042ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042ae:	7cfb      	ldrb	r3, [r7, #19]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80042b4:	7cfb      	ldrb	r3, [r7, #19]
 80042b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d02b      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d2:	4908      	ldr	r1, [pc, #32]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042e2:	d109      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4a02      	ldr	r2, [pc, #8]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ee:	60d3      	str	r3, [r2, #12]
 80042f0:	e014      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80042f2:	bf00      	nop
 80042f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004300:	d10c      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3304      	adds	r3, #4
 8004306:	2101      	movs	r1, #1
 8004308:	4618      	mov	r0, r3
 800430a:	f000 f867 	bl	80043dc <RCCEx_PLLSAI1_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004312:	7cfb      	ldrb	r3, [r7, #19]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004318:	7cfb      	ldrb	r3, [r7, #19]
 800431a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d02f      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004328:	4b2b      	ldr	r3, [pc, #172]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004336:	4928      	ldr	r1, [pc, #160]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004346:	d10d      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3304      	adds	r3, #4
 800434c:	2102      	movs	r1, #2
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f844 	bl	80043dc <RCCEx_PLLSAI1_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d014      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800435e:	7cfb      	ldrb	r3, [r7, #19]
 8004360:	74bb      	strb	r3, [r7, #18]
 8004362:	e011      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800436c:	d10c      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3320      	adds	r3, #32
 8004372:	2102      	movs	r1, #2
 8004374:	4618      	mov	r0, r3
 8004376:	f000 f925 	bl	80045c4 <RCCEx_PLLSAI2_Config>
 800437a:	4603      	mov	r3, r0
 800437c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800437e:	7cfb      	ldrb	r3, [r7, #19]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004384:	7cfb      	ldrb	r3, [r7, #19]
 8004386:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004394:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043a2:	490d      	ldr	r1, [pc, #52]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00b      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043b6:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c6:	4904      	ldr	r1, [pc, #16]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40021000 	.word	0x40021000

080043dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043ea:	4b75      	ldr	r3, [pc, #468]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d018      	beq.n	8004428 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043f6:	4b72      	ldr	r3, [pc, #456]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0203 	and.w	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d10d      	bne.n	8004422 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
       ||
 800440a:	2b00      	cmp	r3, #0
 800440c:	d009      	beq.n	8004422 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800440e:	4b6c      	ldr	r3, [pc, #432]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
       ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d047      	beq.n	80044b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
 8004426:	e044      	b.n	80044b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b03      	cmp	r3, #3
 800442e:	d018      	beq.n	8004462 <RCCEx_PLLSAI1_Config+0x86>
 8004430:	2b03      	cmp	r3, #3
 8004432:	d825      	bhi.n	8004480 <RCCEx_PLLSAI1_Config+0xa4>
 8004434:	2b01      	cmp	r3, #1
 8004436:	d002      	beq.n	800443e <RCCEx_PLLSAI1_Config+0x62>
 8004438:	2b02      	cmp	r3, #2
 800443a:	d009      	beq.n	8004450 <RCCEx_PLLSAI1_Config+0x74>
 800443c:	e020      	b.n	8004480 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800443e:	4b60      	ldr	r3, [pc, #384]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d11d      	bne.n	8004486 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800444e:	e01a      	b.n	8004486 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004450:	4b5b      	ldr	r3, [pc, #364]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004458:	2b00      	cmp	r3, #0
 800445a:	d116      	bne.n	800448a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004460:	e013      	b.n	800448a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004462:	4b57      	ldr	r3, [pc, #348]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10f      	bne.n	800448e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800446e:	4b54      	ldr	r3, [pc, #336]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800447e:	e006      	b.n	800448e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
      break;
 8004484:	e004      	b.n	8004490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004486:	bf00      	nop
 8004488:	e002      	b.n	8004490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800448a:	bf00      	nop
 800448c:	e000      	b.n	8004490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800448e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10d      	bne.n	80044b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004496:	4b4a      	ldr	r3, [pc, #296]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6819      	ldr	r1, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	430b      	orrs	r3, r1
 80044ac:	4944      	ldr	r1, [pc, #272]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d17d      	bne.n	80045b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044b8:	4b41      	ldr	r3, [pc, #260]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a40      	ldr	r2, [pc, #256]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c4:	f7fc fe96 	bl	80011f4 <HAL_GetTick>
 80044c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044ca:	e009      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044cc:	f7fc fe92 	bl	80011f4 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d902      	bls.n	80044e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	73fb      	strb	r3, [r7, #15]
        break;
 80044de:	e005      	b.n	80044ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044e0:	4b37      	ldr	r3, [pc, #220]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1ef      	bne.n	80044cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d160      	bne.n	80045b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d111      	bne.n	800451c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044f8:	4b31      	ldr	r3, [pc, #196]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6892      	ldr	r2, [r2, #8]
 8004508:	0211      	lsls	r1, r2, #8
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	68d2      	ldr	r2, [r2, #12]
 800450e:	0912      	lsrs	r2, r2, #4
 8004510:	0452      	lsls	r2, r2, #17
 8004512:	430a      	orrs	r2, r1
 8004514:	492a      	ldr	r1, [pc, #168]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004516:	4313      	orrs	r3, r2
 8004518:	610b      	str	r3, [r1, #16]
 800451a:	e027      	b.n	800456c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d112      	bne.n	8004548 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004522:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800452a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6892      	ldr	r2, [r2, #8]
 8004532:	0211      	lsls	r1, r2, #8
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6912      	ldr	r2, [r2, #16]
 8004538:	0852      	lsrs	r2, r2, #1
 800453a:	3a01      	subs	r2, #1
 800453c:	0552      	lsls	r2, r2, #21
 800453e:	430a      	orrs	r2, r1
 8004540:	491f      	ldr	r1, [pc, #124]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004542:	4313      	orrs	r3, r2
 8004544:	610b      	str	r3, [r1, #16]
 8004546:	e011      	b.n	800456c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004548:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004550:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6892      	ldr	r2, [r2, #8]
 8004558:	0211      	lsls	r1, r2, #8
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6952      	ldr	r2, [r2, #20]
 800455e:	0852      	lsrs	r2, r2, #1
 8004560:	3a01      	subs	r2, #1
 8004562:	0652      	lsls	r2, r2, #25
 8004564:	430a      	orrs	r2, r1
 8004566:	4916      	ldr	r1, [pc, #88]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004568:	4313      	orrs	r3, r2
 800456a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800456c:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004572:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004576:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004578:	f7fc fe3c 	bl	80011f4 <HAL_GetTick>
 800457c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800457e:	e009      	b.n	8004594 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004580:	f7fc fe38 	bl	80011f4 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d902      	bls.n	8004594 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	73fb      	strb	r3, [r7, #15]
          break;
 8004592:	e005      	b.n	80045a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004594:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0ef      	beq.n	8004580 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045a6:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	4904      	ldr	r1, [pc, #16]	; (80045c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000

080045c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045d2:	4b6a      	ldr	r3, [pc, #424]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d018      	beq.n	8004610 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045de:	4b67      	ldr	r3, [pc, #412]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0203 	and.w	r2, r3, #3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d10d      	bne.n	800460a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
       ||
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80045f6:	4b61      	ldr	r3, [pc, #388]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	091b      	lsrs	r3, r3, #4
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
       ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d047      	beq.n	800469a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	73fb      	strb	r3, [r7, #15]
 800460e:	e044      	b.n	800469a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b03      	cmp	r3, #3
 8004616:	d018      	beq.n	800464a <RCCEx_PLLSAI2_Config+0x86>
 8004618:	2b03      	cmp	r3, #3
 800461a:	d825      	bhi.n	8004668 <RCCEx_PLLSAI2_Config+0xa4>
 800461c:	2b01      	cmp	r3, #1
 800461e:	d002      	beq.n	8004626 <RCCEx_PLLSAI2_Config+0x62>
 8004620:	2b02      	cmp	r3, #2
 8004622:	d009      	beq.n	8004638 <RCCEx_PLLSAI2_Config+0x74>
 8004624:	e020      	b.n	8004668 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004626:	4b55      	ldr	r3, [pc, #340]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d11d      	bne.n	800466e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004636:	e01a      	b.n	800466e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004638:	4b50      	ldr	r3, [pc, #320]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004640:	2b00      	cmp	r3, #0
 8004642:	d116      	bne.n	8004672 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004648:	e013      	b.n	8004672 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800464a:	4b4c      	ldr	r3, [pc, #304]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10f      	bne.n	8004676 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004656:	4b49      	ldr	r3, [pc, #292]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004666:	e006      	b.n	8004676 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      break;
 800466c:	e004      	b.n	8004678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800466e:	bf00      	nop
 8004670:	e002      	b.n	8004678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004672:	bf00      	nop
 8004674:	e000      	b.n	8004678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004676:	bf00      	nop
    }

    if(status == HAL_OK)
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10d      	bne.n	800469a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800467e:	4b3f      	ldr	r3, [pc, #252]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	3b01      	subs	r3, #1
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	430b      	orrs	r3, r1
 8004694:	4939      	ldr	r1, [pc, #228]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004696:	4313      	orrs	r3, r2
 8004698:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d167      	bne.n	8004770 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046a0:	4b36      	ldr	r3, [pc, #216]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a35      	ldr	r2, [pc, #212]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ac:	f7fc fda2 	bl	80011f4 <HAL_GetTick>
 80046b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046b2:	e009      	b.n	80046c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046b4:	f7fc fd9e 	bl	80011f4 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d902      	bls.n	80046c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	73fb      	strb	r3, [r7, #15]
        break;
 80046c6:	e005      	b.n	80046d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046c8:	4b2c      	ldr	r3, [pc, #176]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1ef      	bne.n	80046b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d14a      	bne.n	8004770 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d111      	bne.n	8004704 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046e0:	4b26      	ldr	r3, [pc, #152]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6892      	ldr	r2, [r2, #8]
 80046f0:	0211      	lsls	r1, r2, #8
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68d2      	ldr	r2, [r2, #12]
 80046f6:	0912      	lsrs	r2, r2, #4
 80046f8:	0452      	lsls	r2, r2, #17
 80046fa:	430a      	orrs	r2, r1
 80046fc:	491f      	ldr	r1, [pc, #124]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	614b      	str	r3, [r1, #20]
 8004702:	e011      	b.n	8004728 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004704:	4b1d      	ldr	r3, [pc, #116]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800470c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6892      	ldr	r2, [r2, #8]
 8004714:	0211      	lsls	r1, r2, #8
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6912      	ldr	r2, [r2, #16]
 800471a:	0852      	lsrs	r2, r2, #1
 800471c:	3a01      	subs	r2, #1
 800471e:	0652      	lsls	r2, r2, #25
 8004720:	430a      	orrs	r2, r1
 8004722:	4916      	ldr	r1, [pc, #88]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004724:	4313      	orrs	r3, r2
 8004726:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004728:	4b14      	ldr	r3, [pc, #80]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a13      	ldr	r2, [pc, #76]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 800472e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004732:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004734:	f7fc fd5e 	bl	80011f4 <HAL_GetTick>
 8004738:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800473a:	e009      	b.n	8004750 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800473c:	f7fc fd5a 	bl	80011f4 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d902      	bls.n	8004750 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	73fb      	strb	r3, [r7, #15]
          break;
 800474e:	e005      	b.n	800475c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0ef      	beq.n	800473c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004762:	4b06      	ldr	r3, [pc, #24]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004764:	695a      	ldr	r2, [r3, #20]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	4904      	ldr	r1, [pc, #16]	; (800477c <RCCEx_PLLSAI2_Config+0x1b8>)
 800476c:	4313      	orrs	r3, r2
 800476e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004770:	7bfb      	ldrb	r3, [r7, #15]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000

08004780 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e049      	b.n	8004826 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fc fb58 	bl	8000e5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4619      	mov	r1, r3
 80047be:	4610      	mov	r0, r2
 80047c0:	f000 fba2 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <HAL_TIM_PWM_Start+0x24>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e03c      	b.n	80048ce <HAL_TIM_PWM_Start+0x9e>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b04      	cmp	r3, #4
 8004858:	d109      	bne.n	800486e <HAL_TIM_PWM_Start+0x3e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b01      	cmp	r3, #1
 8004864:	bf14      	ite	ne
 8004866:	2301      	movne	r3, #1
 8004868:	2300      	moveq	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	e02f      	b.n	80048ce <HAL_TIM_PWM_Start+0x9e>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b08      	cmp	r3, #8
 8004872:	d109      	bne.n	8004888 <HAL_TIM_PWM_Start+0x58>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	bf14      	ite	ne
 8004880:	2301      	movne	r3, #1
 8004882:	2300      	moveq	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e022      	b.n	80048ce <HAL_TIM_PWM_Start+0x9e>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b0c      	cmp	r3, #12
 800488c:	d109      	bne.n	80048a2 <HAL_TIM_PWM_Start+0x72>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b01      	cmp	r3, #1
 8004898:	bf14      	ite	ne
 800489a:	2301      	movne	r3, #1
 800489c:	2300      	moveq	r3, #0
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	e015      	b.n	80048ce <HAL_TIM_PWM_Start+0x9e>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d109      	bne.n	80048bc <HAL_TIM_PWM_Start+0x8c>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	bf14      	ite	ne
 80048b4:	2301      	movne	r3, #1
 80048b6:	2300      	moveq	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	e008      	b.n	80048ce <HAL_TIM_PWM_Start+0x9e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	bf14      	ite	ne
 80048c8:	2301      	movne	r3, #1
 80048ca:	2300      	moveq	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e09c      	b.n	8004a10 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_PWM_Start+0xb6>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e4:	e023      	b.n	800492e <HAL_TIM_PWM_Start+0xfe>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d104      	bne.n	80048f6 <HAL_TIM_PWM_Start+0xc6>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f4:	e01b      	b.n	800492e <HAL_TIM_PWM_Start+0xfe>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_PWM_Start+0xd6>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004904:	e013      	b.n	800492e <HAL_TIM_PWM_Start+0xfe>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b0c      	cmp	r3, #12
 800490a:	d104      	bne.n	8004916 <HAL_TIM_PWM_Start+0xe6>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004914:	e00b      	b.n	800492e <HAL_TIM_PWM_Start+0xfe>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b10      	cmp	r3, #16
 800491a:	d104      	bne.n	8004926 <HAL_TIM_PWM_Start+0xf6>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004924:	e003      	b.n	800492e <HAL_TIM_PWM_Start+0xfe>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2201      	movs	r2, #1
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fe56 	bl	80055e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a35      	ldr	r2, [pc, #212]	; (8004a18 <HAL_TIM_PWM_Start+0x1e8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_TIM_PWM_Start+0x13e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a34      	ldr	r2, [pc, #208]	; (8004a1c <HAL_TIM_PWM_Start+0x1ec>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <HAL_TIM_PWM_Start+0x13e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a32      	ldr	r2, [pc, #200]	; (8004a20 <HAL_TIM_PWM_Start+0x1f0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_TIM_PWM_Start+0x13e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a31      	ldr	r2, [pc, #196]	; (8004a24 <HAL_TIM_PWM_Start+0x1f4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_TIM_PWM_Start+0x13e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a2f      	ldr	r2, [pc, #188]	; (8004a28 <HAL_TIM_PWM_Start+0x1f8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d101      	bne.n	8004972 <HAL_TIM_PWM_Start+0x142>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <HAL_TIM_PWM_Start+0x144>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d007      	beq.n	8004988 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004986:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a22      	ldr	r2, [pc, #136]	; (8004a18 <HAL_TIM_PWM_Start+0x1e8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d01d      	beq.n	80049ce <HAL_TIM_PWM_Start+0x19e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499a:	d018      	beq.n	80049ce <HAL_TIM_PWM_Start+0x19e>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a22      	ldr	r2, [pc, #136]	; (8004a2c <HAL_TIM_PWM_Start+0x1fc>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d013      	beq.n	80049ce <HAL_TIM_PWM_Start+0x19e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a21      	ldr	r2, [pc, #132]	; (8004a30 <HAL_TIM_PWM_Start+0x200>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00e      	beq.n	80049ce <HAL_TIM_PWM_Start+0x19e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <HAL_TIM_PWM_Start+0x204>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d009      	beq.n	80049ce <HAL_TIM_PWM_Start+0x19e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a17      	ldr	r2, [pc, #92]	; (8004a1c <HAL_TIM_PWM_Start+0x1ec>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d004      	beq.n	80049ce <HAL_TIM_PWM_Start+0x19e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a15      	ldr	r2, [pc, #84]	; (8004a20 <HAL_TIM_PWM_Start+0x1f0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d115      	bne.n	80049fa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	4b18      	ldr	r3, [pc, #96]	; (8004a38 <HAL_TIM_PWM_Start+0x208>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b06      	cmp	r3, #6
 80049de:	d015      	beq.n	8004a0c <HAL_TIM_PWM_Start+0x1dc>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e6:	d011      	beq.n	8004a0c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f8:	e008      	b.n	8004a0c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f042 0201 	orr.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	e000      	b.n	8004a0e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40012c00 	.word	0x40012c00
 8004a1c:	40013400 	.word	0x40013400
 8004a20:	40014000 	.word	0x40014000
 8004a24:	40014400 	.word	0x40014400
 8004a28:	40014800 	.word	0x40014800
 8004a2c:	40000400 	.word	0x40000400
 8004a30:	40000800 	.word	0x40000800
 8004a34:	40000c00 	.word	0x40000c00
 8004a38:	00010007 	.word	0x00010007

08004a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d122      	bne.n	8004a98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d11b      	bne.n	8004a98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0202 	mvn.w	r2, #2
 8004a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fa24 	bl	8004ecc <HAL_TIM_IC_CaptureCallback>
 8004a84:	e005      	b.n	8004a92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fa16 	bl	8004eb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 fa27 	bl	8004ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f003 0304 	and.w	r3, r3, #4
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d122      	bne.n	8004aec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d11b      	bne.n	8004aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f06f 0204 	mvn.w	r2, #4
 8004abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f9fa 	bl	8004ecc <HAL_TIM_IC_CaptureCallback>
 8004ad8:	e005      	b.n	8004ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f9ec 	bl	8004eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f9fd 	bl	8004ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d122      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d11b      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0208 	mvn.w	r2, #8
 8004b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2204      	movs	r2, #4
 8004b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f9d0 	bl	8004ecc <HAL_TIM_IC_CaptureCallback>
 8004b2c:	e005      	b.n	8004b3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f9c2 	bl	8004eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f9d3 	bl	8004ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f003 0310 	and.w	r3, r3, #16
 8004b4a:	2b10      	cmp	r3, #16
 8004b4c:	d122      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0310 	and.w	r3, r3, #16
 8004b58:	2b10      	cmp	r3, #16
 8004b5a:	d11b      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0210 	mvn.w	r2, #16
 8004b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2208      	movs	r2, #8
 8004b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f9a6 	bl	8004ecc <HAL_TIM_IC_CaptureCallback>
 8004b80:	e005      	b.n	8004b8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f998 	bl	8004eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f9a9 	bl	8004ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d10e      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d107      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0201 	mvn.w	r2, #1
 8004bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f972 	bl	8004ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bca:	2b80      	cmp	r3, #128	; 0x80
 8004bcc:	d10e      	bne.n	8004bec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd8:	2b80      	cmp	r3, #128	; 0x80
 8004bda:	d107      	bne.n	8004bec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fdb6 	bl	8005758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfa:	d10e      	bne.n	8004c1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c06:	2b80      	cmp	r3, #128	; 0x80
 8004c08:	d107      	bne.n	8004c1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fda9 	bl	800576c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c24:	2b40      	cmp	r3, #64	; 0x40
 8004c26:	d10e      	bne.n	8004c46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c32:	2b40      	cmp	r3, #64	; 0x40
 8004c34:	d107      	bne.n	8004c46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f957 	bl	8004ef4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d10e      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	d107      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f06f 0220 	mvn.w	r2, #32
 8004c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fd69 	bl	8005744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e0ff      	b.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b14      	cmp	r3, #20
 8004ca6:	f200 80f0 	bhi.w	8004e8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004caa:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb0:	08004d05 	.word	0x08004d05
 8004cb4:	08004e8b 	.word	0x08004e8b
 8004cb8:	08004e8b 	.word	0x08004e8b
 8004cbc:	08004e8b 	.word	0x08004e8b
 8004cc0:	08004d45 	.word	0x08004d45
 8004cc4:	08004e8b 	.word	0x08004e8b
 8004cc8:	08004e8b 	.word	0x08004e8b
 8004ccc:	08004e8b 	.word	0x08004e8b
 8004cd0:	08004d87 	.word	0x08004d87
 8004cd4:	08004e8b 	.word	0x08004e8b
 8004cd8:	08004e8b 	.word	0x08004e8b
 8004cdc:	08004e8b 	.word	0x08004e8b
 8004ce0:	08004dc7 	.word	0x08004dc7
 8004ce4:	08004e8b 	.word	0x08004e8b
 8004ce8:	08004e8b 	.word	0x08004e8b
 8004cec:	08004e8b 	.word	0x08004e8b
 8004cf0:	08004e09 	.word	0x08004e09
 8004cf4:	08004e8b 	.word	0x08004e8b
 8004cf8:	08004e8b 	.word	0x08004e8b
 8004cfc:	08004e8b 	.word	0x08004e8b
 8004d00:	08004e49 	.word	0x08004e49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68b9      	ldr	r1, [r7, #8]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 f996 	bl	800503c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0208 	orr.w	r2, r2, #8
 8004d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0204 	bic.w	r2, r2, #4
 8004d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6999      	ldr	r1, [r3, #24]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	619a      	str	r2, [r3, #24]
      break;
 8004d42:	e0a5      	b.n	8004e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fa06 	bl	800515c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6999      	ldr	r1, [r3, #24]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	021a      	lsls	r2, r3, #8
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	619a      	str	r2, [r3, #24]
      break;
 8004d84:	e084      	b.n	8004e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fa6f 	bl	8005270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0208 	orr.w	r2, r2, #8
 8004da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69da      	ldr	r2, [r3, #28]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0204 	bic.w	r2, r2, #4
 8004db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69d9      	ldr	r1, [r3, #28]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	61da      	str	r2, [r3, #28]
      break;
 8004dc4:	e064      	b.n	8004e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 fad7 	bl	8005380 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69da      	ldr	r2, [r3, #28]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69da      	ldr	r2, [r3, #28]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69d9      	ldr	r1, [r3, #28]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	021a      	lsls	r2, r3, #8
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	61da      	str	r2, [r3, #28]
      break;
 8004e06:	e043      	b.n	8004e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68b9      	ldr	r1, [r7, #8]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 fb20 	bl	8005454 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0208 	orr.w	r2, r2, #8
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0204 	bic.w	r2, r2, #4
 8004e32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	691a      	ldr	r2, [r3, #16]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e46:	e023      	b.n	8004e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fb64 	bl	800551c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	021a      	lsls	r2, r3, #8
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e88:	e002      	b.n	8004e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop

08004ea4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a40      	ldr	r2, [pc, #256]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d013      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f26:	d00f      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a3d      	ldr	r2, [pc, #244]	; (8005020 <TIM_Base_SetConfig+0x118>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00b      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a3c      	ldr	r2, [pc, #240]	; (8005024 <TIM_Base_SetConfig+0x11c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3b      	ldr	r2, [pc, #236]	; (8005028 <TIM_Base_SetConfig+0x120>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a3a      	ldr	r2, [pc, #232]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d108      	bne.n	8004f5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2f      	ldr	r2, [pc, #188]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01f      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f68:	d01b      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2c      	ldr	r2, [pc, #176]	; (8005020 <TIM_Base_SetConfig+0x118>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d017      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2b      	ldr	r2, [pc, #172]	; (8005024 <TIM_Base_SetConfig+0x11c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <TIM_Base_SetConfig+0x120>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00f      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a29      	ldr	r2, [pc, #164]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a28      	ldr	r2, [pc, #160]	; (8005030 <TIM_Base_SetConfig+0x128>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a27      	ldr	r2, [pc, #156]	; (8005034 <TIM_Base_SetConfig+0x12c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a26      	ldr	r2, [pc, #152]	; (8005038 <TIM_Base_SetConfig+0x130>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d108      	bne.n	8004fb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a10      	ldr	r2, [pc, #64]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00f      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a12      	ldr	r2, [pc, #72]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00b      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a11      	ldr	r2, [pc, #68]	; (8005030 <TIM_Base_SetConfig+0x128>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d007      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a10      	ldr	r2, [pc, #64]	; (8005034 <TIM_Base_SetConfig+0x12c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d003      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a0f      	ldr	r2, [pc, #60]	; (8005038 <TIM_Base_SetConfig+0x130>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d103      	bne.n	8005008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	615a      	str	r2, [r3, #20]
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800
 8005028:	40000c00 	.word	0x40000c00
 800502c:	40013400 	.word	0x40013400
 8005030:	40014000 	.word	0x40014000
 8005034:	40014400 	.word	0x40014400
 8005038:	40014800 	.word	0x40014800

0800503c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f023 0201 	bic.w	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0303 	bic.w	r3, r3, #3
 8005076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f023 0302 	bic.w	r3, r3, #2
 8005088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a2c      	ldr	r2, [pc, #176]	; (8005148 <TIM_OC1_SetConfig+0x10c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00f      	beq.n	80050bc <TIM_OC1_SetConfig+0x80>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a2b      	ldr	r2, [pc, #172]	; (800514c <TIM_OC1_SetConfig+0x110>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00b      	beq.n	80050bc <TIM_OC1_SetConfig+0x80>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a2a      	ldr	r2, [pc, #168]	; (8005150 <TIM_OC1_SetConfig+0x114>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d007      	beq.n	80050bc <TIM_OC1_SetConfig+0x80>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a29      	ldr	r2, [pc, #164]	; (8005154 <TIM_OC1_SetConfig+0x118>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC1_SetConfig+0x80>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a28      	ldr	r2, [pc, #160]	; (8005158 <TIM_OC1_SetConfig+0x11c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10c      	bne.n	80050d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0308 	bic.w	r3, r3, #8
 80050c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f023 0304 	bic.w	r3, r3, #4
 80050d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <TIM_OC1_SetConfig+0x10c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00f      	beq.n	80050fe <TIM_OC1_SetConfig+0xc2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a1a      	ldr	r2, [pc, #104]	; (800514c <TIM_OC1_SetConfig+0x110>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00b      	beq.n	80050fe <TIM_OC1_SetConfig+0xc2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a19      	ldr	r2, [pc, #100]	; (8005150 <TIM_OC1_SetConfig+0x114>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d007      	beq.n	80050fe <TIM_OC1_SetConfig+0xc2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a18      	ldr	r2, [pc, #96]	; (8005154 <TIM_OC1_SetConfig+0x118>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d003      	beq.n	80050fe <TIM_OC1_SetConfig+0xc2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a17      	ldr	r2, [pc, #92]	; (8005158 <TIM_OC1_SetConfig+0x11c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d111      	bne.n	8005122 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800510c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	621a      	str	r2, [r3, #32]
}
 800513c:	bf00      	nop
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40013400 	.word	0x40013400
 8005150:	40014000 	.word	0x40014000
 8005154:	40014400 	.word	0x40014400
 8005158:	40014800 	.word	0x40014800

0800515c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f023 0210 	bic.w	r2, r3, #16
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800518a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f023 0320 	bic.w	r3, r3, #32
 80051aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a28      	ldr	r2, [pc, #160]	; (800525c <TIM_OC2_SetConfig+0x100>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d003      	beq.n	80051c8 <TIM_OC2_SetConfig+0x6c>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a27      	ldr	r2, [pc, #156]	; (8005260 <TIM_OC2_SetConfig+0x104>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d10d      	bne.n	80051e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a1d      	ldr	r2, [pc, #116]	; (800525c <TIM_OC2_SetConfig+0x100>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00f      	beq.n	800520c <TIM_OC2_SetConfig+0xb0>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a1c      	ldr	r2, [pc, #112]	; (8005260 <TIM_OC2_SetConfig+0x104>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d00b      	beq.n	800520c <TIM_OC2_SetConfig+0xb0>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a1b      	ldr	r2, [pc, #108]	; (8005264 <TIM_OC2_SetConfig+0x108>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d007      	beq.n	800520c <TIM_OC2_SetConfig+0xb0>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a1a      	ldr	r2, [pc, #104]	; (8005268 <TIM_OC2_SetConfig+0x10c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d003      	beq.n	800520c <TIM_OC2_SetConfig+0xb0>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a19      	ldr	r2, [pc, #100]	; (800526c <TIM_OC2_SetConfig+0x110>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d113      	bne.n	8005234 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800521a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40012c00 	.word	0x40012c00
 8005260:	40013400 	.word	0x40013400
 8005264:	40014000 	.word	0x40014000
 8005268:	40014400 	.word	0x40014400
 800526c:	40014800 	.word	0x40014800

08005270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0303 	bic.w	r3, r3, #3
 80052aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a27      	ldr	r2, [pc, #156]	; (800536c <TIM_OC3_SetConfig+0xfc>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_OC3_SetConfig+0x6a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a26      	ldr	r2, [pc, #152]	; (8005370 <TIM_OC3_SetConfig+0x100>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d10d      	bne.n	80052f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1c      	ldr	r2, [pc, #112]	; (800536c <TIM_OC3_SetConfig+0xfc>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00f      	beq.n	800531e <TIM_OC3_SetConfig+0xae>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <TIM_OC3_SetConfig+0x100>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00b      	beq.n	800531e <TIM_OC3_SetConfig+0xae>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1a      	ldr	r2, [pc, #104]	; (8005374 <TIM_OC3_SetConfig+0x104>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d007      	beq.n	800531e <TIM_OC3_SetConfig+0xae>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a19      	ldr	r2, [pc, #100]	; (8005378 <TIM_OC3_SetConfig+0x108>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d003      	beq.n	800531e <TIM_OC3_SetConfig+0xae>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a18      	ldr	r2, [pc, #96]	; (800537c <TIM_OC3_SetConfig+0x10c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d113      	bne.n	8005346 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800532c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	621a      	str	r2, [r3, #32]
}
 8005360:	bf00      	nop
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	40012c00 	.word	0x40012c00
 8005370:	40013400 	.word	0x40013400
 8005374:	40014000 	.word	0x40014000
 8005378:	40014400 	.word	0x40014400
 800537c:	40014800 	.word	0x40014800

08005380 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	031b      	lsls	r3, r3, #12
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a18      	ldr	r2, [pc, #96]	; (8005440 <TIM_OC4_SetConfig+0xc0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00f      	beq.n	8005404 <TIM_OC4_SetConfig+0x84>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a17      	ldr	r2, [pc, #92]	; (8005444 <TIM_OC4_SetConfig+0xc4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00b      	beq.n	8005404 <TIM_OC4_SetConfig+0x84>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a16      	ldr	r2, [pc, #88]	; (8005448 <TIM_OC4_SetConfig+0xc8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d007      	beq.n	8005404 <TIM_OC4_SetConfig+0x84>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a15      	ldr	r2, [pc, #84]	; (800544c <TIM_OC4_SetConfig+0xcc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_OC4_SetConfig+0x84>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a14      	ldr	r2, [pc, #80]	; (8005450 <TIM_OC4_SetConfig+0xd0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d109      	bne.n	8005418 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800540a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	019b      	lsls	r3, r3, #6
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	621a      	str	r2, [r3, #32]
}
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40012c00 	.word	0x40012c00
 8005444:	40013400 	.word	0x40013400
 8005448:	40014000 	.word	0x40014000
 800544c:	40014400 	.word	0x40014400
 8005450:	40014800 	.word	0x40014800

08005454 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005498:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	041b      	lsls	r3, r3, #16
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a17      	ldr	r2, [pc, #92]	; (8005508 <TIM_OC5_SetConfig+0xb4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00f      	beq.n	80054ce <TIM_OC5_SetConfig+0x7a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a16      	ldr	r2, [pc, #88]	; (800550c <TIM_OC5_SetConfig+0xb8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00b      	beq.n	80054ce <TIM_OC5_SetConfig+0x7a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a15      	ldr	r2, [pc, #84]	; (8005510 <TIM_OC5_SetConfig+0xbc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d007      	beq.n	80054ce <TIM_OC5_SetConfig+0x7a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a14      	ldr	r2, [pc, #80]	; (8005514 <TIM_OC5_SetConfig+0xc0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d003      	beq.n	80054ce <TIM_OC5_SetConfig+0x7a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a13      	ldr	r2, [pc, #76]	; (8005518 <TIM_OC5_SetConfig+0xc4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d109      	bne.n	80054e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	021b      	lsls	r3, r3, #8
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400
 8005518:	40014800 	.word	0x40014800

0800551c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	051b      	lsls	r3, r3, #20
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a18      	ldr	r2, [pc, #96]	; (80055d4 <TIM_OC6_SetConfig+0xb8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00f      	beq.n	8005598 <TIM_OC6_SetConfig+0x7c>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a17      	ldr	r2, [pc, #92]	; (80055d8 <TIM_OC6_SetConfig+0xbc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00b      	beq.n	8005598 <TIM_OC6_SetConfig+0x7c>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a16      	ldr	r2, [pc, #88]	; (80055dc <TIM_OC6_SetConfig+0xc0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d007      	beq.n	8005598 <TIM_OC6_SetConfig+0x7c>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a15      	ldr	r2, [pc, #84]	; (80055e0 <TIM_OC6_SetConfig+0xc4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d003      	beq.n	8005598 <TIM_OC6_SetConfig+0x7c>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a14      	ldr	r2, [pc, #80]	; (80055e4 <TIM_OC6_SetConfig+0xc8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d109      	bne.n	80055ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800559e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	029b      	lsls	r3, r3, #10
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40013400 	.word	0x40013400
 80055dc:	40014000 	.word	0x40014000
 80055e0:	40014400 	.word	0x40014400
 80055e4:	40014800 	.word	0x40014800

080055e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 031f 	and.w	r3, r3, #31
 80055fa:	2201      	movs	r2, #1
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a1a      	ldr	r2, [r3, #32]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	43db      	mvns	r3, r3
 800560a:	401a      	ands	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a1a      	ldr	r2, [r3, #32]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f003 031f 	and.w	r3, r3, #31
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	fa01 f303 	lsl.w	r3, r1, r3
 8005620:	431a      	orrs	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	621a      	str	r2, [r3, #32]
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005648:	2302      	movs	r3, #2
 800564a:	e068      	b.n	800571e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a2e      	ldr	r2, [pc, #184]	; (800572c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d004      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a2d      	ldr	r2, [pc, #180]	; (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d108      	bne.n	8005692 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005686:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005698:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a1e      	ldr	r2, [pc, #120]	; (800572c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d01d      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056be:	d018      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1b      	ldr	r2, [pc, #108]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d013      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1a      	ldr	r2, [pc, #104]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00e      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a18      	ldr	r2, [pc, #96]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d009      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a13      	ldr	r2, [pc, #76]	; (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d004      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a14      	ldr	r2, [pc, #80]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d10c      	bne.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	4313      	orrs	r3, r2
 8005702:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40012c00 	.word	0x40012c00
 8005730:	40013400 	.word	0x40013400
 8005734:	40000400 	.word	0x40000400
 8005738:	40000800 	.word	0x40000800
 800573c:	40000c00 	.word	0x40000c00
 8005740:	40014000 	.word	0x40014000

08005744 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e040      	b.n	8005814 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fb fbd2 	bl	8000f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2224      	movs	r2, #36	; 0x24
 80057ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0201 	bic.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f82c 	bl	800581c <UART_SetConfig>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e022      	b.n	8005814 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fad8 	bl	8005d8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fb5f 	bl	8005ed0 <UART_CheckIdleState>
 8005812:	4603      	mov	r3, r0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800581c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005820:	b08a      	sub	sp, #40	; 0x28
 8005822:	af00      	add	r7, sp, #0
 8005824:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	431a      	orrs	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	431a      	orrs	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	4313      	orrs	r3, r2
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4ba4      	ldr	r3, [pc, #656]	; (8005adc <UART_SetConfig+0x2c0>)
 800584c:	4013      	ands	r3, r2
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	6812      	ldr	r2, [r2, #0]
 8005852:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005854:	430b      	orrs	r3, r1
 8005856:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a99      	ldr	r2, [pc, #612]	; (8005ae0 <UART_SetConfig+0x2c4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d004      	beq.n	8005888 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005884:	4313      	orrs	r3, r2
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005898:	430a      	orrs	r2, r1
 800589a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a90      	ldr	r2, [pc, #576]	; (8005ae4 <UART_SetConfig+0x2c8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d126      	bne.n	80058f4 <UART_SetConfig+0xd8>
 80058a6:	4b90      	ldr	r3, [pc, #576]	; (8005ae8 <UART_SetConfig+0x2cc>)
 80058a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ac:	f003 0303 	and.w	r3, r3, #3
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d81b      	bhi.n	80058ec <UART_SetConfig+0xd0>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <UART_SetConfig+0xa0>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	080058cd 	.word	0x080058cd
 80058c0:	080058dd 	.word	0x080058dd
 80058c4:	080058d5 	.word	0x080058d5
 80058c8:	080058e5 	.word	0x080058e5
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058d2:	e116      	b.n	8005b02 <UART_SetConfig+0x2e6>
 80058d4:	2302      	movs	r3, #2
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058da:	e112      	b.n	8005b02 <UART_SetConfig+0x2e6>
 80058dc:	2304      	movs	r3, #4
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058e2:	e10e      	b.n	8005b02 <UART_SetConfig+0x2e6>
 80058e4:	2308      	movs	r3, #8
 80058e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ea:	e10a      	b.n	8005b02 <UART_SetConfig+0x2e6>
 80058ec:	2310      	movs	r3, #16
 80058ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058f2:	e106      	b.n	8005b02 <UART_SetConfig+0x2e6>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a7c      	ldr	r2, [pc, #496]	; (8005aec <UART_SetConfig+0x2d0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d138      	bne.n	8005970 <UART_SetConfig+0x154>
 80058fe:	4b7a      	ldr	r3, [pc, #488]	; (8005ae8 <UART_SetConfig+0x2cc>)
 8005900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005904:	f003 030c 	and.w	r3, r3, #12
 8005908:	2b0c      	cmp	r3, #12
 800590a:	d82d      	bhi.n	8005968 <UART_SetConfig+0x14c>
 800590c:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <UART_SetConfig+0xf8>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	08005949 	.word	0x08005949
 8005918:	08005969 	.word	0x08005969
 800591c:	08005969 	.word	0x08005969
 8005920:	08005969 	.word	0x08005969
 8005924:	08005959 	.word	0x08005959
 8005928:	08005969 	.word	0x08005969
 800592c:	08005969 	.word	0x08005969
 8005930:	08005969 	.word	0x08005969
 8005934:	08005951 	.word	0x08005951
 8005938:	08005969 	.word	0x08005969
 800593c:	08005969 	.word	0x08005969
 8005940:	08005969 	.word	0x08005969
 8005944:	08005961 	.word	0x08005961
 8005948:	2300      	movs	r3, #0
 800594a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800594e:	e0d8      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005950:	2302      	movs	r3, #2
 8005952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005956:	e0d4      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005958:	2304      	movs	r3, #4
 800595a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800595e:	e0d0      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005960:	2308      	movs	r3, #8
 8005962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005966:	e0cc      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005968:	2310      	movs	r3, #16
 800596a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596e:	e0c8      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a5e      	ldr	r2, [pc, #376]	; (8005af0 <UART_SetConfig+0x2d4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d125      	bne.n	80059c6 <UART_SetConfig+0x1aa>
 800597a:	4b5b      	ldr	r3, [pc, #364]	; (8005ae8 <UART_SetConfig+0x2cc>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005980:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005984:	2b30      	cmp	r3, #48	; 0x30
 8005986:	d016      	beq.n	80059b6 <UART_SetConfig+0x19a>
 8005988:	2b30      	cmp	r3, #48	; 0x30
 800598a:	d818      	bhi.n	80059be <UART_SetConfig+0x1a2>
 800598c:	2b20      	cmp	r3, #32
 800598e:	d00a      	beq.n	80059a6 <UART_SetConfig+0x18a>
 8005990:	2b20      	cmp	r3, #32
 8005992:	d814      	bhi.n	80059be <UART_SetConfig+0x1a2>
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <UART_SetConfig+0x182>
 8005998:	2b10      	cmp	r3, #16
 800599a:	d008      	beq.n	80059ae <UART_SetConfig+0x192>
 800599c:	e00f      	b.n	80059be <UART_SetConfig+0x1a2>
 800599e:	2300      	movs	r3, #0
 80059a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059a4:	e0ad      	b.n	8005b02 <UART_SetConfig+0x2e6>
 80059a6:	2302      	movs	r3, #2
 80059a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ac:	e0a9      	b.n	8005b02 <UART_SetConfig+0x2e6>
 80059ae:	2304      	movs	r3, #4
 80059b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b4:	e0a5      	b.n	8005b02 <UART_SetConfig+0x2e6>
 80059b6:	2308      	movs	r3, #8
 80059b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059bc:	e0a1      	b.n	8005b02 <UART_SetConfig+0x2e6>
 80059be:	2310      	movs	r3, #16
 80059c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c4:	e09d      	b.n	8005b02 <UART_SetConfig+0x2e6>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a4a      	ldr	r2, [pc, #296]	; (8005af4 <UART_SetConfig+0x2d8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d125      	bne.n	8005a1c <UART_SetConfig+0x200>
 80059d0:	4b45      	ldr	r3, [pc, #276]	; (8005ae8 <UART_SetConfig+0x2cc>)
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059da:	2bc0      	cmp	r3, #192	; 0xc0
 80059dc:	d016      	beq.n	8005a0c <UART_SetConfig+0x1f0>
 80059de:	2bc0      	cmp	r3, #192	; 0xc0
 80059e0:	d818      	bhi.n	8005a14 <UART_SetConfig+0x1f8>
 80059e2:	2b80      	cmp	r3, #128	; 0x80
 80059e4:	d00a      	beq.n	80059fc <UART_SetConfig+0x1e0>
 80059e6:	2b80      	cmp	r3, #128	; 0x80
 80059e8:	d814      	bhi.n	8005a14 <UART_SetConfig+0x1f8>
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <UART_SetConfig+0x1d8>
 80059ee:	2b40      	cmp	r3, #64	; 0x40
 80059f0:	d008      	beq.n	8005a04 <UART_SetConfig+0x1e8>
 80059f2:	e00f      	b.n	8005a14 <UART_SetConfig+0x1f8>
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059fa:	e082      	b.n	8005b02 <UART_SetConfig+0x2e6>
 80059fc:	2302      	movs	r3, #2
 80059fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a02:	e07e      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005a04:	2304      	movs	r3, #4
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0a:	e07a      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005a0c:	2308      	movs	r3, #8
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a12:	e076      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005a14:	2310      	movs	r3, #16
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1a:	e072      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a35      	ldr	r2, [pc, #212]	; (8005af8 <UART_SetConfig+0x2dc>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d12a      	bne.n	8005a7c <UART_SetConfig+0x260>
 8005a26:	4b30      	ldr	r3, [pc, #192]	; (8005ae8 <UART_SetConfig+0x2cc>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a34:	d01a      	beq.n	8005a6c <UART_SetConfig+0x250>
 8005a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a3a:	d81b      	bhi.n	8005a74 <UART_SetConfig+0x258>
 8005a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a40:	d00c      	beq.n	8005a5c <UART_SetConfig+0x240>
 8005a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a46:	d815      	bhi.n	8005a74 <UART_SetConfig+0x258>
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <UART_SetConfig+0x238>
 8005a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a50:	d008      	beq.n	8005a64 <UART_SetConfig+0x248>
 8005a52:	e00f      	b.n	8005a74 <UART_SetConfig+0x258>
 8005a54:	2300      	movs	r3, #0
 8005a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a5a:	e052      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a62:	e04e      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005a64:	2304      	movs	r3, #4
 8005a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a6a:	e04a      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005a6c:	2308      	movs	r3, #8
 8005a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a72:	e046      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005a74:	2310      	movs	r3, #16
 8005a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7a:	e042      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a17      	ldr	r2, [pc, #92]	; (8005ae0 <UART_SetConfig+0x2c4>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d13a      	bne.n	8005afc <UART_SetConfig+0x2e0>
 8005a86:	4b18      	ldr	r3, [pc, #96]	; (8005ae8 <UART_SetConfig+0x2cc>)
 8005a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a94:	d01a      	beq.n	8005acc <UART_SetConfig+0x2b0>
 8005a96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a9a:	d81b      	bhi.n	8005ad4 <UART_SetConfig+0x2b8>
 8005a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa0:	d00c      	beq.n	8005abc <UART_SetConfig+0x2a0>
 8005aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa6:	d815      	bhi.n	8005ad4 <UART_SetConfig+0x2b8>
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <UART_SetConfig+0x298>
 8005aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab0:	d008      	beq.n	8005ac4 <UART_SetConfig+0x2a8>
 8005ab2:	e00f      	b.n	8005ad4 <UART_SetConfig+0x2b8>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aba:	e022      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005abc:	2302      	movs	r3, #2
 8005abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac2:	e01e      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aca:	e01a      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005acc:	2308      	movs	r3, #8
 8005ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ad2:	e016      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ada:	e012      	b.n	8005b02 <UART_SetConfig+0x2e6>
 8005adc:	efff69f3 	.word	0xefff69f3
 8005ae0:	40008000 	.word	0x40008000
 8005ae4:	40013800 	.word	0x40013800
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	40004400 	.word	0x40004400
 8005af0:	40004800 	.word	0x40004800
 8005af4:	40004c00 	.word	0x40004c00
 8005af8:	40005000 	.word	0x40005000
 8005afc:	2310      	movs	r3, #16
 8005afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a9f      	ldr	r2, [pc, #636]	; (8005d84 <UART_SetConfig+0x568>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d17a      	bne.n	8005c02 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	d824      	bhi.n	8005b5e <UART_SetConfig+0x342>
 8005b14:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <UART_SetConfig+0x300>)
 8005b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1a:	bf00      	nop
 8005b1c:	08005b41 	.word	0x08005b41
 8005b20:	08005b5f 	.word	0x08005b5f
 8005b24:	08005b49 	.word	0x08005b49
 8005b28:	08005b5f 	.word	0x08005b5f
 8005b2c:	08005b4f 	.word	0x08005b4f
 8005b30:	08005b5f 	.word	0x08005b5f
 8005b34:	08005b5f 	.word	0x08005b5f
 8005b38:	08005b5f 	.word	0x08005b5f
 8005b3c:	08005b57 	.word	0x08005b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b40:	f7fe f8d6 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8005b44:	61f8      	str	r0, [r7, #28]
        break;
 8005b46:	e010      	b.n	8005b6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b48:	4b8f      	ldr	r3, [pc, #572]	; (8005d88 <UART_SetConfig+0x56c>)
 8005b4a:	61fb      	str	r3, [r7, #28]
        break;
 8005b4c:	e00d      	b.n	8005b6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b4e:	f7fe f837 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 8005b52:	61f8      	str	r0, [r7, #28]
        break;
 8005b54:	e009      	b.n	8005b6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b5a:	61fb      	str	r3, [r7, #28]
        break;
 8005b5c:	e005      	b.n	8005b6a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 80fb 	beq.w	8005d68 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	4613      	mov	r3, r2
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	4413      	add	r3, r2
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d305      	bcc.n	8005b8e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b88:	69fa      	ldr	r2, [r7, #28]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d903      	bls.n	8005b96 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b94:	e0e8      	b.n	8005d68 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	461c      	mov	r4, r3
 8005b9c:	4615      	mov	r5, r2
 8005b9e:	f04f 0200 	mov.w	r2, #0
 8005ba2:	f04f 0300 	mov.w	r3, #0
 8005ba6:	022b      	lsls	r3, r5, #8
 8005ba8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005bac:	0222      	lsls	r2, r4, #8
 8005bae:	68f9      	ldr	r1, [r7, #12]
 8005bb0:	6849      	ldr	r1, [r1, #4]
 8005bb2:	0849      	lsrs	r1, r1, #1
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	4688      	mov	r8, r1
 8005bb8:	4681      	mov	r9, r0
 8005bba:	eb12 0a08 	adds.w	sl, r2, r8
 8005bbe:	eb43 0b09 	adc.w	fp, r3, r9
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	603b      	str	r3, [r7, #0]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bd0:	4650      	mov	r0, sl
 8005bd2:	4659      	mov	r1, fp
 8005bd4:	f7fa faf8 	bl	80001c8 <__aeabi_uldivmod>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4613      	mov	r3, r2
 8005bde:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005be6:	d308      	bcc.n	8005bfa <UART_SetConfig+0x3de>
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bee:	d204      	bcs.n	8005bfa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	60da      	str	r2, [r3, #12]
 8005bf8:	e0b6      	b.n	8005d68 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c00:	e0b2      	b.n	8005d68 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c0a:	d15e      	bne.n	8005cca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d828      	bhi.n	8005c66 <UART_SetConfig+0x44a>
 8005c14:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <UART_SetConfig+0x400>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c41 	.word	0x08005c41
 8005c20:	08005c49 	.word	0x08005c49
 8005c24:	08005c51 	.word	0x08005c51
 8005c28:	08005c67 	.word	0x08005c67
 8005c2c:	08005c57 	.word	0x08005c57
 8005c30:	08005c67 	.word	0x08005c67
 8005c34:	08005c67 	.word	0x08005c67
 8005c38:	08005c67 	.word	0x08005c67
 8005c3c:	08005c5f 	.word	0x08005c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c40:	f7fe f856 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8005c44:	61f8      	str	r0, [r7, #28]
        break;
 8005c46:	e014      	b.n	8005c72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c48:	f7fe f868 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 8005c4c:	61f8      	str	r0, [r7, #28]
        break;
 8005c4e:	e010      	b.n	8005c72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c50:	4b4d      	ldr	r3, [pc, #308]	; (8005d88 <UART_SetConfig+0x56c>)
 8005c52:	61fb      	str	r3, [r7, #28]
        break;
 8005c54:	e00d      	b.n	8005c72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c56:	f7fd ffb3 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 8005c5a:	61f8      	str	r0, [r7, #28]
        break;
 8005c5c:	e009      	b.n	8005c72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c62:	61fb      	str	r3, [r7, #28]
        break;
 8005c64:	e005      	b.n	8005c72 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d077      	beq.n	8005d68 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	005a      	lsls	r2, r3, #1
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	085b      	lsrs	r3, r3, #1
 8005c82:	441a      	add	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	2b0f      	cmp	r3, #15
 8005c92:	d916      	bls.n	8005cc2 <UART_SetConfig+0x4a6>
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c9a:	d212      	bcs.n	8005cc2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	f023 030f 	bic.w	r3, r3, #15
 8005ca4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	085b      	lsrs	r3, r3, #1
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	8afb      	ldrh	r3, [r7, #22]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	8afa      	ldrh	r2, [r7, #22]
 8005cbe:	60da      	str	r2, [r3, #12]
 8005cc0:	e052      	b.n	8005d68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005cc8:	e04e      	b.n	8005d68 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d827      	bhi.n	8005d22 <UART_SetConfig+0x506>
 8005cd2:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <UART_SetConfig+0x4bc>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005cfd 	.word	0x08005cfd
 8005cdc:	08005d05 	.word	0x08005d05
 8005ce0:	08005d0d 	.word	0x08005d0d
 8005ce4:	08005d23 	.word	0x08005d23
 8005ce8:	08005d13 	.word	0x08005d13
 8005cec:	08005d23 	.word	0x08005d23
 8005cf0:	08005d23 	.word	0x08005d23
 8005cf4:	08005d23 	.word	0x08005d23
 8005cf8:	08005d1b 	.word	0x08005d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cfc:	f7fd fff8 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8005d00:	61f8      	str	r0, [r7, #28]
        break;
 8005d02:	e014      	b.n	8005d2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d04:	f7fe f80a 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 8005d08:	61f8      	str	r0, [r7, #28]
        break;
 8005d0a:	e010      	b.n	8005d2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d0c:	4b1e      	ldr	r3, [pc, #120]	; (8005d88 <UART_SetConfig+0x56c>)
 8005d0e:	61fb      	str	r3, [r7, #28]
        break;
 8005d10:	e00d      	b.n	8005d2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d12:	f7fd ff55 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 8005d16:	61f8      	str	r0, [r7, #28]
        break;
 8005d18:	e009      	b.n	8005d2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d1e:	61fb      	str	r3, [r7, #28]
        break;
 8005d20:	e005      	b.n	8005d2e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d2c:	bf00      	nop
    }

    if (pclk != 0U)
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d019      	beq.n	8005d68 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	085a      	lsrs	r2, r3, #1
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	441a      	add	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	2b0f      	cmp	r3, #15
 8005d4c:	d909      	bls.n	8005d62 <UART_SetConfig+0x546>
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d54:	d205      	bcs.n	8005d62 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60da      	str	r2, [r3, #12]
 8005d60:	e002      	b.n	8005d68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3728      	adds	r7, #40	; 0x28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d82:	bf00      	nop
 8005d84:	40008000 	.word	0x40008000
 8005d88:	00f42400 	.word	0x00f42400

08005d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00a      	beq.n	8005db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00a      	beq.n	8005dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	f003 0310 	and.w	r3, r3, #16
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d01a      	beq.n	8005ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e8a:	d10a      	bne.n	8005ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	605a      	str	r2, [r3, #4]
  }
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af02      	add	r7, sp, #8
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ee0:	f7fb f988 	bl	80011f4 <HAL_GetTick>
 8005ee4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0308 	and.w	r3, r3, #8
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d10e      	bne.n	8005f12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f82d 	bl	8005f62 <UART_WaitOnFlagUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e023      	b.n	8005f5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d10e      	bne.n	8005f3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f817 	bl	8005f62 <UART_WaitOnFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e00d      	b.n	8005f5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2220      	movs	r2, #32
 8005f42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2220      	movs	r2, #32
 8005f48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b09c      	sub	sp, #112	; 0x70
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f72:	e0a5      	b.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	f000 80a1 	beq.w	80060c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7e:	f7fb f939 	bl	80011f4 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d302      	bcc.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d13e      	bne.n	8006012 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e6      	bne.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	f023 0301 	bic.w	r3, r3, #1
 8005fdc:	663b      	str	r3, [r7, #96]	; 0x60
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fe6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fe8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e5      	bne.n	8005fc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e067      	b.n	80060e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	d04f      	beq.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800602a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602e:	d147      	bne.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006038:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	e853 3f00 	ldrex	r3, [r3]
 8006046:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800604e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	461a      	mov	r2, r3
 8006056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006058:	637b      	str	r3, [r7, #52]	; 0x34
 800605a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800605e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006060:	e841 2300 	strex	r3, r2, [r1]
 8006064:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e6      	bne.n	800603a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3308      	adds	r3, #8
 8006072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	613b      	str	r3, [r7, #16]
   return(result);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f023 0301 	bic.w	r3, r3, #1
 8006082:	66bb      	str	r3, [r7, #104]	; 0x68
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3308      	adds	r3, #8
 800608a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800608c:	623a      	str	r2, [r7, #32]
 800608e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	69f9      	ldr	r1, [r7, #28]
 8006092:	6a3a      	ldr	r2, [r7, #32]
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	61bb      	str	r3, [r7, #24]
   return(result);
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e5      	bne.n	800606c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2220      	movs	r2, #32
 80060a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e010      	b.n	80060e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69da      	ldr	r2, [r3, #28]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	4013      	ands	r3, r2
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	bf0c      	ite	eq
 80060d0:	2301      	moveq	r3, #1
 80060d2:	2300      	movne	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	461a      	mov	r2, r3
 80060d8:	79fb      	ldrb	r3, [r7, #7]
 80060da:	429a      	cmp	r2, r3
 80060dc:	f43f af4a 	beq.w	8005f74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3770      	adds	r7, #112	; 0x70
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <__libc_init_array>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	4d0d      	ldr	r5, [pc, #52]	; (8006124 <__libc_init_array+0x38>)
 80060f0:	4c0d      	ldr	r4, [pc, #52]	; (8006128 <__libc_init_array+0x3c>)
 80060f2:	1b64      	subs	r4, r4, r5
 80060f4:	10a4      	asrs	r4, r4, #2
 80060f6:	2600      	movs	r6, #0
 80060f8:	42a6      	cmp	r6, r4
 80060fa:	d109      	bne.n	8006110 <__libc_init_array+0x24>
 80060fc:	4d0b      	ldr	r5, [pc, #44]	; (800612c <__libc_init_array+0x40>)
 80060fe:	4c0c      	ldr	r4, [pc, #48]	; (8006130 <__libc_init_array+0x44>)
 8006100:	f000 f9a8 	bl	8006454 <_init>
 8006104:	1b64      	subs	r4, r4, r5
 8006106:	10a4      	asrs	r4, r4, #2
 8006108:	2600      	movs	r6, #0
 800610a:	42a6      	cmp	r6, r4
 800610c:	d105      	bne.n	800611a <__libc_init_array+0x2e>
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	f855 3b04 	ldr.w	r3, [r5], #4
 8006114:	4798      	blx	r3
 8006116:	3601      	adds	r6, #1
 8006118:	e7ee      	b.n	80060f8 <__libc_init_array+0xc>
 800611a:	f855 3b04 	ldr.w	r3, [r5], #4
 800611e:	4798      	blx	r3
 8006120:	3601      	adds	r6, #1
 8006122:	e7f2      	b.n	800610a <__libc_init_array+0x1e>
 8006124:	080064c8 	.word	0x080064c8
 8006128:	080064c8 	.word	0x080064c8
 800612c:	080064c8 	.word	0x080064c8
 8006130:	080064cc 	.word	0x080064cc

08006134 <memset>:
 8006134:	4402      	add	r2, r0
 8006136:	4603      	mov	r3, r0
 8006138:	4293      	cmp	r3, r2
 800613a:	d100      	bne.n	800613e <memset+0xa>
 800613c:	4770      	bx	lr
 800613e:	f803 1b01 	strb.w	r1, [r3], #1
 8006142:	e7f9      	b.n	8006138 <memset+0x4>

08006144 <swapfunc>:
 8006144:	2b02      	cmp	r3, #2
 8006146:	b510      	push	{r4, lr}
 8006148:	d00a      	beq.n	8006160 <swapfunc+0x1c>
 800614a:	0892      	lsrs	r2, r2, #2
 800614c:	3a01      	subs	r2, #1
 800614e:	6803      	ldr	r3, [r0, #0]
 8006150:	680c      	ldr	r4, [r1, #0]
 8006152:	f840 4b04 	str.w	r4, [r0], #4
 8006156:	2a00      	cmp	r2, #0
 8006158:	f841 3b04 	str.w	r3, [r1], #4
 800615c:	dcf6      	bgt.n	800614c <swapfunc+0x8>
 800615e:	bd10      	pop	{r4, pc}
 8006160:	4402      	add	r2, r0
 8006162:	780c      	ldrb	r4, [r1, #0]
 8006164:	7803      	ldrb	r3, [r0, #0]
 8006166:	f800 4b01 	strb.w	r4, [r0], #1
 800616a:	f801 3b01 	strb.w	r3, [r1], #1
 800616e:	1a13      	subs	r3, r2, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	dcf6      	bgt.n	8006162 <swapfunc+0x1e>
 8006174:	e7f3      	b.n	800615e <swapfunc+0x1a>

08006176 <med3.constprop.0>:
 8006176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006178:	460c      	mov	r4, r1
 800617a:	4615      	mov	r5, r2
 800617c:	4607      	mov	r7, r0
 800617e:	461e      	mov	r6, r3
 8006180:	4798      	blx	r3
 8006182:	2800      	cmp	r0, #0
 8006184:	4629      	mov	r1, r5
 8006186:	4620      	mov	r0, r4
 8006188:	da0a      	bge.n	80061a0 <med3.constprop.0+0x2a>
 800618a:	47b0      	blx	r6
 800618c:	2800      	cmp	r0, #0
 800618e:	db05      	blt.n	800619c <med3.constprop.0+0x26>
 8006190:	4629      	mov	r1, r5
 8006192:	4638      	mov	r0, r7
 8006194:	47b0      	blx	r6
 8006196:	2800      	cmp	r0, #0
 8006198:	db0a      	blt.n	80061b0 <med3.constprop.0+0x3a>
 800619a:	463c      	mov	r4, r7
 800619c:	4620      	mov	r0, r4
 800619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a0:	47b0      	blx	r6
 80061a2:	2800      	cmp	r0, #0
 80061a4:	dcfa      	bgt.n	800619c <med3.constprop.0+0x26>
 80061a6:	4629      	mov	r1, r5
 80061a8:	4638      	mov	r0, r7
 80061aa:	47b0      	blx	r6
 80061ac:	2800      	cmp	r0, #0
 80061ae:	dbf4      	blt.n	800619a <med3.constprop.0+0x24>
 80061b0:	462c      	mov	r4, r5
 80061b2:	e7f3      	b.n	800619c <med3.constprop.0+0x26>

080061b4 <qsort>:
 80061b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b8:	469a      	mov	sl, r3
 80061ba:	ea40 0302 	orr.w	r3, r0, r2
 80061be:	079b      	lsls	r3, r3, #30
 80061c0:	b097      	sub	sp, #92	; 0x5c
 80061c2:	4606      	mov	r6, r0
 80061c4:	4614      	mov	r4, r2
 80061c6:	d11a      	bne.n	80061fe <qsort+0x4a>
 80061c8:	f1b2 0804 	subs.w	r8, r2, #4
 80061cc:	bf18      	it	ne
 80061ce:	f04f 0801 	movne.w	r8, #1
 80061d2:	2300      	movs	r3, #0
 80061d4:	9302      	str	r3, [sp, #8]
 80061d6:	1933      	adds	r3, r6, r4
 80061d8:	fb04 f701 	mul.w	r7, r4, r1
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	2906      	cmp	r1, #6
 80061e0:	eb06 0307 	add.w	r3, r6, r7
 80061e4:	9303      	str	r3, [sp, #12]
 80061e6:	d82a      	bhi.n	800623e <qsort+0x8a>
 80061e8:	9b01      	ldr	r3, [sp, #4]
 80061ea:	9a03      	ldr	r2, [sp, #12]
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d310      	bcc.n	8006212 <qsort+0x5e>
 80061f0:	9b02      	ldr	r3, [sp, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f040 811e 	bne.w	8006434 <qsort+0x280>
 80061f8:	b017      	add	sp, #92	; 0x5c
 80061fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fe:	f04f 0802 	mov.w	r8, #2
 8006202:	e7e6      	b.n	80061d2 <qsort+0x1e>
 8006204:	4643      	mov	r3, r8
 8006206:	4622      	mov	r2, r4
 8006208:	4639      	mov	r1, r7
 800620a:	4628      	mov	r0, r5
 800620c:	f7ff ff9a 	bl	8006144 <swapfunc>
 8006210:	e00e      	b.n	8006230 <qsort+0x7c>
 8006212:	9d01      	ldr	r5, [sp, #4]
 8006214:	e00d      	b.n	8006232 <qsort+0x7e>
 8006216:	1b2f      	subs	r7, r5, r4
 8006218:	4629      	mov	r1, r5
 800621a:	4638      	mov	r0, r7
 800621c:	47d0      	blx	sl
 800621e:	2800      	cmp	r0, #0
 8006220:	dd09      	ble.n	8006236 <qsort+0x82>
 8006222:	f1b8 0f00 	cmp.w	r8, #0
 8006226:	d1ed      	bne.n	8006204 <qsort+0x50>
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	602a      	str	r2, [r5, #0]
 800622e:	603b      	str	r3, [r7, #0]
 8006230:	463d      	mov	r5, r7
 8006232:	42ae      	cmp	r6, r5
 8006234:	d3ef      	bcc.n	8006216 <qsort+0x62>
 8006236:	9b01      	ldr	r3, [sp, #4]
 8006238:	4423      	add	r3, r4
 800623a:	9301      	str	r3, [sp, #4]
 800623c:	e7d4      	b.n	80061e8 <qsort+0x34>
 800623e:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8006242:	1b3f      	subs	r7, r7, r4
 8006244:	2907      	cmp	r1, #7
 8006246:	fb04 6909 	mla	r9, r4, r9, r6
 800624a:	4437      	add	r7, r6
 800624c:	d022      	beq.n	8006294 <qsort+0xe0>
 800624e:	2928      	cmp	r1, #40	; 0x28
 8006250:	d945      	bls.n	80062de <qsort+0x12a>
 8006252:	08c9      	lsrs	r1, r1, #3
 8006254:	fb04 f501 	mul.w	r5, r4, r1
 8006258:	4653      	mov	r3, sl
 800625a:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800625e:	1971      	adds	r1, r6, r5
 8006260:	4630      	mov	r0, r6
 8006262:	f7ff ff88 	bl	8006176 <med3.constprop.0>
 8006266:	4649      	mov	r1, r9
 8006268:	eb09 0205 	add.w	r2, r9, r5
 800626c:	4653      	mov	r3, sl
 800626e:	4683      	mov	fp, r0
 8006270:	1b48      	subs	r0, r1, r5
 8006272:	f7ff ff80 	bl	8006176 <med3.constprop.0>
 8006276:	463a      	mov	r2, r7
 8006278:	4681      	mov	r9, r0
 800627a:	4653      	mov	r3, sl
 800627c:	1b79      	subs	r1, r7, r5
 800627e:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8006282:	f7ff ff78 	bl	8006176 <med3.constprop.0>
 8006286:	4602      	mov	r2, r0
 8006288:	4649      	mov	r1, r9
 800628a:	4653      	mov	r3, sl
 800628c:	4658      	mov	r0, fp
 800628e:	f7ff ff72 	bl	8006176 <med3.constprop.0>
 8006292:	4681      	mov	r9, r0
 8006294:	f1b8 0f00 	cmp.w	r8, #0
 8006298:	d124      	bne.n	80062e4 <qsort+0x130>
 800629a:	6833      	ldr	r3, [r6, #0]
 800629c:	f8d9 2000 	ldr.w	r2, [r9]
 80062a0:	6032      	str	r2, [r6, #0]
 80062a2:	f8c9 3000 	str.w	r3, [r9]
 80062a6:	eb06 0b04 	add.w	fp, r6, r4
 80062aa:	46b9      	mov	r9, r7
 80062ac:	465d      	mov	r5, fp
 80062ae:	2300      	movs	r3, #0
 80062b0:	45bb      	cmp	fp, r7
 80062b2:	d835      	bhi.n	8006320 <qsort+0x16c>
 80062b4:	4631      	mov	r1, r6
 80062b6:	4658      	mov	r0, fp
 80062b8:	9304      	str	r3, [sp, #16]
 80062ba:	47d0      	blx	sl
 80062bc:	2800      	cmp	r0, #0
 80062be:	9b04      	ldr	r3, [sp, #16]
 80062c0:	dc3e      	bgt.n	8006340 <qsort+0x18c>
 80062c2:	d10a      	bne.n	80062da <qsort+0x126>
 80062c4:	f1b8 0f00 	cmp.w	r8, #0
 80062c8:	d113      	bne.n	80062f2 <qsort+0x13e>
 80062ca:	682b      	ldr	r3, [r5, #0]
 80062cc:	f8db 2000 	ldr.w	r2, [fp]
 80062d0:	602a      	str	r2, [r5, #0]
 80062d2:	f8cb 3000 	str.w	r3, [fp]
 80062d6:	4425      	add	r5, r4
 80062d8:	2301      	movs	r3, #1
 80062da:	44a3      	add	fp, r4
 80062dc:	e7e8      	b.n	80062b0 <qsort+0xfc>
 80062de:	463a      	mov	r2, r7
 80062e0:	46b3      	mov	fp, r6
 80062e2:	e7d1      	b.n	8006288 <qsort+0xd4>
 80062e4:	4643      	mov	r3, r8
 80062e6:	4622      	mov	r2, r4
 80062e8:	4649      	mov	r1, r9
 80062ea:	4630      	mov	r0, r6
 80062ec:	f7ff ff2a 	bl	8006144 <swapfunc>
 80062f0:	e7d9      	b.n	80062a6 <qsort+0xf2>
 80062f2:	4643      	mov	r3, r8
 80062f4:	4622      	mov	r2, r4
 80062f6:	4659      	mov	r1, fp
 80062f8:	4628      	mov	r0, r5
 80062fa:	f7ff ff23 	bl	8006144 <swapfunc>
 80062fe:	e7ea      	b.n	80062d6 <qsort+0x122>
 8006300:	d10b      	bne.n	800631a <qsort+0x166>
 8006302:	f1b8 0f00 	cmp.w	r8, #0
 8006306:	d114      	bne.n	8006332 <qsort+0x17e>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	f8d9 2000 	ldr.w	r2, [r9]
 800630e:	603a      	str	r2, [r7, #0]
 8006310:	f8c9 3000 	str.w	r3, [r9]
 8006314:	eba9 0904 	sub.w	r9, r9, r4
 8006318:	2301      	movs	r3, #1
 800631a:	9f04      	ldr	r7, [sp, #16]
 800631c:	45bb      	cmp	fp, r7
 800631e:	d90f      	bls.n	8006340 <qsort+0x18c>
 8006320:	2b00      	cmp	r3, #0
 8006322:	d143      	bne.n	80063ac <qsort+0x1f8>
 8006324:	9b01      	ldr	r3, [sp, #4]
 8006326:	9a03      	ldr	r2, [sp, #12]
 8006328:	4293      	cmp	r3, r2
 800632a:	f4bf af61 	bcs.w	80061f0 <qsort+0x3c>
 800632e:	9d01      	ldr	r5, [sp, #4]
 8006330:	e036      	b.n	80063a0 <qsort+0x1ec>
 8006332:	4643      	mov	r3, r8
 8006334:	4622      	mov	r2, r4
 8006336:	4649      	mov	r1, r9
 8006338:	4638      	mov	r0, r7
 800633a:	f7ff ff03 	bl	8006144 <swapfunc>
 800633e:	e7e9      	b.n	8006314 <qsort+0x160>
 8006340:	4631      	mov	r1, r6
 8006342:	4638      	mov	r0, r7
 8006344:	9305      	str	r3, [sp, #20]
 8006346:	47d0      	blx	sl
 8006348:	1b3b      	subs	r3, r7, r4
 800634a:	2800      	cmp	r0, #0
 800634c:	9304      	str	r3, [sp, #16]
 800634e:	9b05      	ldr	r3, [sp, #20]
 8006350:	dad6      	bge.n	8006300 <qsort+0x14c>
 8006352:	f1b8 0f00 	cmp.w	r8, #0
 8006356:	d006      	beq.n	8006366 <qsort+0x1b2>
 8006358:	4643      	mov	r3, r8
 800635a:	4622      	mov	r2, r4
 800635c:	4639      	mov	r1, r7
 800635e:	4658      	mov	r0, fp
 8006360:	f7ff fef0 	bl	8006144 <swapfunc>
 8006364:	e005      	b.n	8006372 <qsort+0x1be>
 8006366:	f8db 3000 	ldr.w	r3, [fp]
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	f8cb 2000 	str.w	r2, [fp]
 8006370:	603b      	str	r3, [r7, #0]
 8006372:	9f04      	ldr	r7, [sp, #16]
 8006374:	e7b0      	b.n	80062d8 <qsort+0x124>
 8006376:	4643      	mov	r3, r8
 8006378:	4622      	mov	r2, r4
 800637a:	4639      	mov	r1, r7
 800637c:	4628      	mov	r0, r5
 800637e:	f7ff fee1 	bl	8006144 <swapfunc>
 8006382:	e00c      	b.n	800639e <qsort+0x1ea>
 8006384:	1b2f      	subs	r7, r5, r4
 8006386:	4629      	mov	r1, r5
 8006388:	4638      	mov	r0, r7
 800638a:	47d0      	blx	sl
 800638c:	2800      	cmp	r0, #0
 800638e:	dd09      	ble.n	80063a4 <qsort+0x1f0>
 8006390:	f1b8 0f00 	cmp.w	r8, #0
 8006394:	d1ef      	bne.n	8006376 <qsort+0x1c2>
 8006396:	682b      	ldr	r3, [r5, #0]
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	602a      	str	r2, [r5, #0]
 800639c:	603b      	str	r3, [r7, #0]
 800639e:	463d      	mov	r5, r7
 80063a0:	42ae      	cmp	r6, r5
 80063a2:	d3ef      	bcc.n	8006384 <qsort+0x1d0>
 80063a4:	9b01      	ldr	r3, [sp, #4]
 80063a6:	4423      	add	r3, r4
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	e7bb      	b.n	8006324 <qsort+0x170>
 80063ac:	ebab 0305 	sub.w	r3, fp, r5
 80063b0:	1baa      	subs	r2, r5, r6
 80063b2:	429a      	cmp	r2, r3
 80063b4:	bfa8      	it	ge
 80063b6:	461a      	movge	r2, r3
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	b12a      	cbz	r2, 80063c8 <qsort+0x214>
 80063bc:	4643      	mov	r3, r8
 80063be:	ebab 0102 	sub.w	r1, fp, r2
 80063c2:	4630      	mov	r0, r6
 80063c4:	f7ff febe 	bl	8006144 <swapfunc>
 80063c8:	9b03      	ldr	r3, [sp, #12]
 80063ca:	eba3 0209 	sub.w	r2, r3, r9
 80063ce:	eba9 0707 	sub.w	r7, r9, r7
 80063d2:	1b12      	subs	r2, r2, r4
 80063d4:	42ba      	cmp	r2, r7
 80063d6:	bf28      	it	cs
 80063d8:	463a      	movcs	r2, r7
 80063da:	b12a      	cbz	r2, 80063e8 <qsort+0x234>
 80063dc:	9903      	ldr	r1, [sp, #12]
 80063de:	4643      	mov	r3, r8
 80063e0:	1a89      	subs	r1, r1, r2
 80063e2:	4658      	mov	r0, fp
 80063e4:	f7ff feae 	bl	8006144 <swapfunc>
 80063e8:	9d01      	ldr	r5, [sp, #4]
 80063ea:	9b03      	ldr	r3, [sp, #12]
 80063ec:	42af      	cmp	r7, r5
 80063ee:	eba3 0007 	sub.w	r0, r3, r7
 80063f2:	d904      	bls.n	80063fe <qsort+0x24a>
 80063f4:	4633      	mov	r3, r6
 80063f6:	463d      	mov	r5, r7
 80063f8:	9f01      	ldr	r7, [sp, #4]
 80063fa:	4606      	mov	r6, r0
 80063fc:	4618      	mov	r0, r3
 80063fe:	42a7      	cmp	r7, r4
 8006400:	d921      	bls.n	8006446 <qsort+0x292>
 8006402:	fbb7 f1f4 	udiv	r1, r7, r4
 8006406:	9b02      	ldr	r3, [sp, #8]
 8006408:	2b07      	cmp	r3, #7
 800640a:	d80d      	bhi.n	8006428 <qsort+0x274>
 800640c:	fbb5 f5f4 	udiv	r5, r5, r4
 8006410:	aa16      	add	r2, sp, #88	; 0x58
 8006412:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006416:	f843 6c40 	str.w	r6, [r3, #-64]
 800641a:	f843 5c3c 	str.w	r5, [r3, #-60]
 800641e:	9b02      	ldr	r3, [sp, #8]
 8006420:	3301      	adds	r3, #1
 8006422:	9302      	str	r3, [sp, #8]
 8006424:	4606      	mov	r6, r0
 8006426:	e6d6      	b.n	80061d6 <qsort+0x22>
 8006428:	4653      	mov	r3, sl
 800642a:	4622      	mov	r2, r4
 800642c:	f7ff fec2 	bl	80061b4 <qsort>
 8006430:	42a5      	cmp	r5, r4
 8006432:	d80b      	bhi.n	800644c <qsort+0x298>
 8006434:	9b02      	ldr	r3, [sp, #8]
 8006436:	aa16      	add	r2, sp, #88	; 0x58
 8006438:	3b01      	subs	r3, #1
 800643a:	9302      	str	r3, [sp, #8]
 800643c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006440:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8006444:	e7ee      	b.n	8006424 <qsort+0x270>
 8006446:	42a5      	cmp	r5, r4
 8006448:	f67f aed2 	bls.w	80061f0 <qsort+0x3c>
 800644c:	fbb5 f1f4 	udiv	r1, r5, r4
 8006450:	4630      	mov	r0, r6
 8006452:	e7e7      	b.n	8006424 <qsort+0x270>

08006454 <_init>:
 8006454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006456:	bf00      	nop
 8006458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645a:	bc08      	pop	{r3}
 800645c:	469e      	mov	lr, r3
 800645e:	4770      	bx	lr

08006460 <_fini>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	bf00      	nop
 8006464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006466:	bc08      	pop	{r3}
 8006468:	469e      	mov	lr, r3
 800646a:	4770      	bx	lr
